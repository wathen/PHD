// This code conforms with the UFC specification version 1.6.0
// and was automatically generated by FFC version 1.6.0.
// 
// This code was generated with the following parameters:
// 
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   True
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   False
//   format:                         'ufc'
//   name:                           'ffc'
//   no-evaluate_basis_derivatives:  True
//   optimize:                       False
//   precision:                      15
//   quadrature_degree:              -1
//   quadrature_rule:                'auto'
//   representation:                 'auto'
//   restrict_keyword:               ''
//   split:                          False

#ifndef __FFC_FORM_98BF8A8ECE7C7C827508A25FDEE08585C780C6E0_H
#define __FFC_FORM_98BF8A8ECE7C7C827508A25FDEE08585C780C6E0_H

#include <cmath>
#include <stdexcept>
#include <fstream>
#include <ufc.h>

/// This class defines the interface for a finite element.

class ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 2, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 6;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582064, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582063, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791031, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 6; r++)
    {
      _evaluate_basis(r, &dof_values, x, vertex_coordinates, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 6; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[4];
    for (unsigned int r = 0; r < 4; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 6; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "VectorElement('Lagrange', Domain(Cell('triangle', 2)), 2, 2, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 12;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582064, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582063, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791031, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582064, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582063, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791031, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 12; r++)
    {
      _evaluate_basis(r, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 2; s++)
      {
        values[r*2 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 12; r++)
    {
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[8];
    for (unsigned int r = 0; r < 8; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 12; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 9:
      {
        y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 10:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 11:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[8] = vals[1];
    y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[9] = vals[1];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[6];
    vertex_values[3] = dof_values[7];
    vertex_values[5] = dof_values[8];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 2;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_finite_element_0();
        break;
      }
    case 1:
      {
        return new ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_finite_element_1();
  }

};

/// This class defines the interface for a finite element.

class ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_finite_element_2: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_finite_element_2()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 1, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 3;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 3; r++)
    {
      _evaluate_basis(r, &dof_values, x, vertex_coordinates, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 3; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[2];
    for (unsigned int r = 0; r < 2; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 3; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_finite_element_2();
  }

};

/// This class defines the interface for a finite element.

class ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_finite_element_3: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_finite_element_3() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_finite_element_3()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "MixedElement(VectorElement('Lagrange', Domain(Cell('triangle', 2)), 2, 2, None), FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 1, None), **{'value_shape': (3,) })";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 15;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582064, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582063, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791031, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582064, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582063, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791031, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 15; r++)
    {
      _evaluate_basis(r, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 3; s++)
      {
        values[r*3 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 15; r++)
    {
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[12];
    for (unsigned int r = 0; r < 12; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 15; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 9:
      {
        y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 10:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 11:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 12:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 13:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 14:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[8] = vals[1];
    y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[9] = vals[1];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[12] = vals[2];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[13] = vals[2];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[14] = vals[2];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[6];
    vertex_values[4] = dof_values[7];
    vertex_values[7] = dof_values[8];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[12];
    vertex_values[5] = dof_values[13];
    vertex_values[8] = dof_values[14];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 2;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_finite_element_1();
        break;
      }
    case 1:
      {
        return new ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_finite_element_2();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_finite_element_3();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_dofmap_0: public ufc::dofmap
{
public:

  /// Constructor
  ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_dofmap_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 2, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return num_global_entities[0] + num_global_entities[1];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const
  {
    return 6;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 3;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 1;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + c.entity_indices[1][0];
    dofs[4] = offset + c.entity_indices[1][1];
    dofs[5] = offset + c.entity_indices[1][2];
    offset += num_global_entities[1];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 4;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 5;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
          break;
        }
      case 1:
        {
          dofs[0] = 4;
          break;
        }
      case 2:
        {
          dofs[0] = 5;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
    dof_coordinates[6] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[7] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[8] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    dof_coordinates[9] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    dof_coordinates[10] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    dof_coordinates[11] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_dofmap_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_dofmap_1: public ufc::dofmap
{
public:

  /// Constructor
  ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_dofmap_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for VectorElement('Lagrange', Domain(Cell('triangle', 2)), 2, 2, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return 2*num_global_entities[0] + 2*num_global_entities[1];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const
  {
    return 12;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 6;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 2;
        break;
      }
    case 1:
      {
        return 2;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + c.entity_indices[1][0];
    dofs[4] = offset + c.entity_indices[1][1];
    dofs[5] = offset + c.entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[6] = offset + c.entity_indices[0][0];
    dofs[7] = offset + c.entity_indices[0][1];
    dofs[8] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[9] = offset + c.entity_indices[1][0];
    dofs[10] = offset + c.entity_indices[1][1];
    dofs[11] = offset + c.entity_indices[1][2];
    offset += num_global_entities[1];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 7;
      dofs[4] = 8;
      dofs[5] = 9;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 4;
      dofs[3] = 6;
      dofs[4] = 8;
      dofs[5] = 10;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 5;
      dofs[3] = 6;
      dofs[4] = 7;
      dofs[5] = 11;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 6;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 7;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 8;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 9;
          break;
        }
      case 1:
        {
          dofs[0] = 4;
        dofs[1] = 10;
          break;
        }
      case 2:
        {
          dofs[0] = 5;
        dofs[1] = 11;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
    dof_coordinates[6] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[7] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[8] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    dof_coordinates[9] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    dof_coordinates[10] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    dof_coordinates[11] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    dof_coordinates[12] = vertex_coordinates[0];
    dof_coordinates[13] = vertex_coordinates[1];
    dof_coordinates[14] = vertex_coordinates[2];
    dof_coordinates[15] = vertex_coordinates[3];
    dof_coordinates[16] = vertex_coordinates[4];
    dof_coordinates[17] = vertex_coordinates[5];
    dof_coordinates[18] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[19] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[20] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    dof_coordinates[21] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    dof_coordinates[22] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    dof_coordinates[23] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 2;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_dofmap_0();
        break;
      }
    case 1:
      {
        return new ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_dofmap_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_dofmap_2: public ufc::dofmap
{
public:

  /// Constructor
  ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_dofmap_2() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_dofmap_2()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 1, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return num_global_entities[0];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const
  {
    return 3;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 2;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_dofmap_2();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_dofmap_3: public ufc::dofmap
{
public:

  /// Constructor
  ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_dofmap_3() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_dofmap_3()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for MixedElement(VectorElement('Lagrange', Domain(Cell('triangle', 2)), 2, 2, None), FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 1, None), **{'value_shape': (3,) })";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return 3*num_global_entities[0] + 2*num_global_entities[1];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const
  {
    return 15;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 8;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 3;
        break;
      }
    case 1:
      {
        return 2;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + c.entity_indices[1][0];
    dofs[4] = offset + c.entity_indices[1][1];
    dofs[5] = offset + c.entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[6] = offset + c.entity_indices[0][0];
    dofs[7] = offset + c.entity_indices[0][1];
    dofs[8] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[9] = offset + c.entity_indices[1][0];
    dofs[10] = offset + c.entity_indices[1][1];
    dofs[11] = offset + c.entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[12] = offset + c.entity_indices[0][0];
    dofs[13] = offset + c.entity_indices[0][1];
    dofs[14] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 7;
      dofs[4] = 8;
      dofs[5] = 9;
      dofs[6] = 13;
      dofs[7] = 14;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 4;
      dofs[3] = 6;
      dofs[4] = 8;
      dofs[5] = 10;
      dofs[6] = 12;
      dofs[7] = 14;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 5;
      dofs[3] = 6;
      dofs[4] = 7;
      dofs[5] = 11;
      dofs[6] = 12;
      dofs[7] = 13;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 6;
        dofs[2] = 12;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 7;
        dofs[2] = 13;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 8;
        dofs[2] = 14;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 9;
          break;
        }
      case 1:
        {
          dofs[0] = 4;
        dofs[1] = 10;
          break;
        }
      case 2:
        {
          dofs[0] = 5;
        dofs[1] = 11;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
    dof_coordinates[6] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[7] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[8] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    dof_coordinates[9] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    dof_coordinates[10] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    dof_coordinates[11] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    dof_coordinates[12] = vertex_coordinates[0];
    dof_coordinates[13] = vertex_coordinates[1];
    dof_coordinates[14] = vertex_coordinates[2];
    dof_coordinates[15] = vertex_coordinates[3];
    dof_coordinates[16] = vertex_coordinates[4];
    dof_coordinates[17] = vertex_coordinates[5];
    dof_coordinates[18] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[19] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[20] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    dof_coordinates[21] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    dof_coordinates[22] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    dof_coordinates[23] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    dof_coordinates[24] = vertex_coordinates[0];
    dof_coordinates[25] = vertex_coordinates[1];
    dof_coordinates[26] = vertex_coordinates[2];
    dof_coordinates[27] = vertex_coordinates[3];
    dof_coordinates[28] = vertex_coordinates[4];
    dof_coordinates[29] = vertex_coordinates[5];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 2;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_dofmap_1();
        break;
      }
    case 1:
      {
        return new ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_dofmap_2();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_dofmap_3();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_cell_integral_0_0: public ufc::cell_integral
{
public:

  /// Constructor
  ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_cell_integral_0_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_cell_integral_0_0()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const
  {
    // Number of operations (multiply-add pairs) for Jacobian data:      3
    // Number of operations (multiply-add pairs) for geometry tensor:    1192
    // Number of operations (multiply-add pairs) for tensor contraction: 3176
    // Total number of operations (multiply-add pairs):                  4371
    
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute geometry tensor
    const double G0_0_0 = det*w[3][0]*K[0]*(1.0);
    const double G0_0_1 = det*w[3][0]*K[2]*(1.0);
    const double G0_1_0 = det*w[3][1]*K[0]*(1.0);
    const double G0_1_1 = det*w[3][1]*K[2]*(1.0);
    const double G0_2_0 = det*w[3][2]*K[0]*(1.0);
    const double G0_2_1 = det*w[3][2]*K[2]*(1.0);
    const double G1_0_0 = det*w[3][0]*K[1]*(1.0);
    const double G1_0_1 = det*w[3][0]*K[3]*(1.0);
    const double G1_1_0 = det*w[3][1]*K[1]*(1.0);
    const double G1_1_1 = det*w[3][1]*K[3]*(1.0);
    const double G1_2_0 = det*w[3][2]*K[1]*(1.0);
    const double G1_2_1 = det*w[3][2]*K[3]*(1.0);
    const double G2_0_0 = det*w[2][0]*K[0]*(1.0);
    const double G2_0_1 = det*w[2][0]*K[2]*(1.0);
    const double G2_1_0 = det*w[2][1]*K[0]*(1.0);
    const double G2_2_1 = det*w[2][2]*K[2]*(1.0);
    const double G2_3_0 = det*w[2][3]*K[0]*(1.0);
    const double G2_3_1 = det*w[2][3]*K[2]*(1.0);
    const double G2_4_0 = det*w[2][4]*K[0]*(1.0);
    const double G2_4_1 = det*w[2][4]*K[2]*(1.0);
    const double G2_5_0 = det*w[2][5]*K[0]*(1.0);
    const double G2_5_1 = det*w[2][5]*K[2]*(1.0);
    const double G3_6_0 = det*w[2][6]*K[1]*(1.0);
    const double G3_6_1 = det*w[2][6]*K[3]*(1.0);
    const double G3_7_0 = det*w[2][7]*K[1]*(1.0);
    const double G3_8_1 = det*w[2][8]*K[3]*(1.0);
    const double G3_9_0 = det*w[2][9]*K[1]*(1.0);
    const double G3_9_1 = det*w[2][9]*K[3]*(1.0);
    const double G3_10_0 = det*w[2][10]*K[1]*(1.0);
    const double G3_10_1 = det*w[2][10]*K[3]*(1.0);
    const double G3_11_0 = det*w[2][11]*K[1]*(1.0);
    const double G3_11_1 = det*w[2][11]*K[3]*(1.0);
    const double G4_0_0_0 = det*w[2][0]*w[2][0]*K[0]*(1.0);
    const double G4_0_0_1 = det*w[2][0]*w[2][0]*K[2]*(1.0);
    const double G4_0_1_0 = det*w[2][0]*w[2][1]*K[0]*(1.0);
    const double G4_0_2_1 = det*w[2][0]*w[2][2]*K[2]*(1.0);
    const double G4_0_3_0 = det*w[2][0]*w[2][3]*K[0]*(1.0);
    const double G4_0_3_1 = det*w[2][0]*w[2][3]*K[2]*(1.0);
    const double G4_0_4_0 = det*w[2][0]*w[2][4]*K[0]*(1.0);
    const double G4_0_4_1 = det*w[2][0]*w[2][4]*K[2]*(1.0);
    const double G4_0_5_0 = det*w[2][0]*w[2][5]*K[0]*(1.0);
    const double G4_0_5_1 = det*w[2][0]*w[2][5]*K[2]*(1.0);
    const double G4_1_0_0 = det*w[2][1]*w[2][0]*K[0]*(1.0);
    const double G4_1_0_1 = det*w[2][1]*w[2][0]*K[2]*(1.0);
    const double G4_1_1_0 = det*w[2][1]*w[2][1]*K[0]*(1.0);
    const double G4_1_2_1 = det*w[2][1]*w[2][2]*K[2]*(1.0);
    const double G4_1_3_0 = det*w[2][1]*w[2][3]*K[0]*(1.0);
    const double G4_1_3_1 = det*w[2][1]*w[2][3]*K[2]*(1.0);
    const double G4_1_4_0 = det*w[2][1]*w[2][4]*K[0]*(1.0);
    const double G4_1_4_1 = det*w[2][1]*w[2][4]*K[2]*(1.0);
    const double G4_1_5_0 = det*w[2][1]*w[2][5]*K[0]*(1.0);
    const double G4_1_5_1 = det*w[2][1]*w[2][5]*K[2]*(1.0);
    const double G4_2_0_0 = det*w[2][2]*w[2][0]*K[0]*(1.0);
    const double G4_2_0_1 = det*w[2][2]*w[2][0]*K[2]*(1.0);
    const double G4_2_1_0 = det*w[2][2]*w[2][1]*K[0]*(1.0);
    const double G4_2_2_1 = det*w[2][2]*w[2][2]*K[2]*(1.0);
    const double G4_2_3_0 = det*w[2][2]*w[2][3]*K[0]*(1.0);
    const double G4_2_3_1 = det*w[2][2]*w[2][3]*K[2]*(1.0);
    const double G4_2_4_0 = det*w[2][2]*w[2][4]*K[0]*(1.0);
    const double G4_2_4_1 = det*w[2][2]*w[2][4]*K[2]*(1.0);
    const double G4_2_5_0 = det*w[2][2]*w[2][5]*K[0]*(1.0);
    const double G4_2_5_1 = det*w[2][2]*w[2][5]*K[2]*(1.0);
    const double G4_3_0_0 = det*w[2][3]*w[2][0]*K[0]*(1.0);
    const double G4_3_0_1 = det*w[2][3]*w[2][0]*K[2]*(1.0);
    const double G4_3_1_0 = det*w[2][3]*w[2][1]*K[0]*(1.0);
    const double G4_3_2_1 = det*w[2][3]*w[2][2]*K[2]*(1.0);
    const double G4_3_3_0 = det*w[2][3]*w[2][3]*K[0]*(1.0);
    const double G4_3_3_1 = det*w[2][3]*w[2][3]*K[2]*(1.0);
    const double G4_3_4_0 = det*w[2][3]*w[2][4]*K[0]*(1.0);
    const double G4_3_4_1 = det*w[2][3]*w[2][4]*K[2]*(1.0);
    const double G4_3_5_0 = det*w[2][3]*w[2][5]*K[0]*(1.0);
    const double G4_3_5_1 = det*w[2][3]*w[2][5]*K[2]*(1.0);
    const double G4_4_0_0 = det*w[2][4]*w[2][0]*K[0]*(1.0);
    const double G4_4_0_1 = det*w[2][4]*w[2][0]*K[2]*(1.0);
    const double G4_4_1_0 = det*w[2][4]*w[2][1]*K[0]*(1.0);
    const double G4_4_2_1 = det*w[2][4]*w[2][2]*K[2]*(1.0);
    const double G4_4_3_0 = det*w[2][4]*w[2][3]*K[0]*(1.0);
    const double G4_4_3_1 = det*w[2][4]*w[2][3]*K[2]*(1.0);
    const double G4_4_4_0 = det*w[2][4]*w[2][4]*K[0]*(1.0);
    const double G4_4_4_1 = det*w[2][4]*w[2][4]*K[2]*(1.0);
    const double G4_4_5_0 = det*w[2][4]*w[2][5]*K[0]*(1.0);
    const double G4_4_5_1 = det*w[2][4]*w[2][5]*K[2]*(1.0);
    const double G4_5_0_0 = det*w[2][5]*w[2][0]*K[0]*(1.0);
    const double G4_5_0_1 = det*w[2][5]*w[2][0]*K[2]*(1.0);
    const double G4_5_1_0 = det*w[2][5]*w[2][1]*K[0]*(1.0);
    const double G4_5_2_1 = det*w[2][5]*w[2][2]*K[2]*(1.0);
    const double G4_5_3_0 = det*w[2][5]*w[2][3]*K[0]*(1.0);
    const double G4_5_3_1 = det*w[2][5]*w[2][3]*K[2]*(1.0);
    const double G4_5_4_0 = det*w[2][5]*w[2][4]*K[0]*(1.0);
    const double G4_5_4_1 = det*w[2][5]*w[2][4]*K[2]*(1.0);
    const double G4_5_5_0 = det*w[2][5]*w[2][5]*K[0]*(1.0);
    const double G4_5_5_1 = det*w[2][5]*w[2][5]*K[2]*(1.0);
    const double G5_0_6_0 = det*w[2][0]*w[2][6]*K[1]*(1.0);
    const double G5_0_6_1 = det*w[2][0]*w[2][6]*K[3]*(1.0);
    const double G5_0_7_0 = det*w[2][0]*w[2][7]*K[1]*(1.0);
    const double G5_0_8_1 = det*w[2][0]*w[2][8]*K[3]*(1.0);
    const double G5_0_9_0 = det*w[2][0]*w[2][9]*K[1]*(1.0);
    const double G5_0_9_1 = det*w[2][0]*w[2][9]*K[3]*(1.0);
    const double G5_0_10_0 = det*w[2][0]*w[2][10]*K[1]*(1.0);
    const double G5_0_10_1 = det*w[2][0]*w[2][10]*K[3]*(1.0);
    const double G5_0_11_0 = det*w[2][0]*w[2][11]*K[1]*(1.0);
    const double G5_0_11_1 = det*w[2][0]*w[2][11]*K[3]*(1.0);
    const double G5_1_6_0 = det*w[2][1]*w[2][6]*K[1]*(1.0);
    const double G5_1_6_1 = det*w[2][1]*w[2][6]*K[3]*(1.0);
    const double G5_1_7_0 = det*w[2][1]*w[2][7]*K[1]*(1.0);
    const double G5_1_8_1 = det*w[2][1]*w[2][8]*K[3]*(1.0);
    const double G5_1_9_0 = det*w[2][1]*w[2][9]*K[1]*(1.0);
    const double G5_1_9_1 = det*w[2][1]*w[2][9]*K[3]*(1.0);
    const double G5_1_10_0 = det*w[2][1]*w[2][10]*K[1]*(1.0);
    const double G5_1_10_1 = det*w[2][1]*w[2][10]*K[3]*(1.0);
    const double G5_1_11_0 = det*w[2][1]*w[2][11]*K[1]*(1.0);
    const double G5_1_11_1 = det*w[2][1]*w[2][11]*K[3]*(1.0);
    const double G5_2_6_0 = det*w[2][2]*w[2][6]*K[1]*(1.0);
    const double G5_2_6_1 = det*w[2][2]*w[2][6]*K[3]*(1.0);
    const double G5_2_7_0 = det*w[2][2]*w[2][7]*K[1]*(1.0);
    const double G5_2_8_1 = det*w[2][2]*w[2][8]*K[3]*(1.0);
    const double G5_2_9_0 = det*w[2][2]*w[2][9]*K[1]*(1.0);
    const double G5_2_9_1 = det*w[2][2]*w[2][9]*K[3]*(1.0);
    const double G5_2_10_0 = det*w[2][2]*w[2][10]*K[1]*(1.0);
    const double G5_2_10_1 = det*w[2][2]*w[2][10]*K[3]*(1.0);
    const double G5_2_11_0 = det*w[2][2]*w[2][11]*K[1]*(1.0);
    const double G5_2_11_1 = det*w[2][2]*w[2][11]*K[3]*(1.0);
    const double G5_3_6_0 = det*w[2][3]*w[2][6]*K[1]*(1.0);
    const double G5_3_6_1 = det*w[2][3]*w[2][6]*K[3]*(1.0);
    const double G5_3_7_0 = det*w[2][3]*w[2][7]*K[1]*(1.0);
    const double G5_3_8_1 = det*w[2][3]*w[2][8]*K[3]*(1.0);
    const double G5_3_9_0 = det*w[2][3]*w[2][9]*K[1]*(1.0);
    const double G5_3_9_1 = det*w[2][3]*w[2][9]*K[3]*(1.0);
    const double G5_3_10_0 = det*w[2][3]*w[2][10]*K[1]*(1.0);
    const double G5_3_10_1 = det*w[2][3]*w[2][10]*K[3]*(1.0);
    const double G5_3_11_0 = det*w[2][3]*w[2][11]*K[1]*(1.0);
    const double G5_3_11_1 = det*w[2][3]*w[2][11]*K[3]*(1.0);
    const double G5_4_6_0 = det*w[2][4]*w[2][6]*K[1]*(1.0);
    const double G5_4_6_1 = det*w[2][4]*w[2][6]*K[3]*(1.0);
    const double G5_4_7_0 = det*w[2][4]*w[2][7]*K[1]*(1.0);
    const double G5_4_8_1 = det*w[2][4]*w[2][8]*K[3]*(1.0);
    const double G5_4_9_0 = det*w[2][4]*w[2][9]*K[1]*(1.0);
    const double G5_4_9_1 = det*w[2][4]*w[2][9]*K[3]*(1.0);
    const double G5_4_10_0 = det*w[2][4]*w[2][10]*K[1]*(1.0);
    const double G5_4_10_1 = det*w[2][4]*w[2][10]*K[3]*(1.0);
    const double G5_4_11_0 = det*w[2][4]*w[2][11]*K[1]*(1.0);
    const double G5_4_11_1 = det*w[2][4]*w[2][11]*K[3]*(1.0);
    const double G5_5_6_0 = det*w[2][5]*w[2][6]*K[1]*(1.0);
    const double G5_5_6_1 = det*w[2][5]*w[2][6]*K[3]*(1.0);
    const double G5_5_7_0 = det*w[2][5]*w[2][7]*K[1]*(1.0);
    const double G5_5_8_1 = det*w[2][5]*w[2][8]*K[3]*(1.0);
    const double G5_5_9_0 = det*w[2][5]*w[2][9]*K[1]*(1.0);
    const double G5_5_9_1 = det*w[2][5]*w[2][9]*K[3]*(1.0);
    const double G5_5_10_0 = det*w[2][5]*w[2][10]*K[1]*(1.0);
    const double G5_5_10_1 = det*w[2][5]*w[2][10]*K[3]*(1.0);
    const double G5_5_11_0 = det*w[2][5]*w[2][11]*K[1]*(1.0);
    const double G5_5_11_1 = det*w[2][5]*w[2][11]*K[3]*(1.0);
    const double G6_6_0_0 = det*w[2][6]*w[2][0]*K[0]*(1.0);
    const double G6_6_0_1 = det*w[2][6]*w[2][0]*K[2]*(1.0);
    const double G6_6_1_0 = det*w[2][6]*w[2][1]*K[0]*(1.0);
    const double G6_6_2_1 = det*w[2][6]*w[2][2]*K[2]*(1.0);
    const double G6_6_3_0 = det*w[2][6]*w[2][3]*K[0]*(1.0);
    const double G6_6_3_1 = det*w[2][6]*w[2][3]*K[2]*(1.0);
    const double G6_6_4_0 = det*w[2][6]*w[2][4]*K[0]*(1.0);
    const double G6_6_4_1 = det*w[2][6]*w[2][4]*K[2]*(1.0);
    const double G6_6_5_0 = det*w[2][6]*w[2][5]*K[0]*(1.0);
    const double G6_6_5_1 = det*w[2][6]*w[2][5]*K[2]*(1.0);
    const double G6_7_0_0 = det*w[2][7]*w[2][0]*K[0]*(1.0);
    const double G6_7_0_1 = det*w[2][7]*w[2][0]*K[2]*(1.0);
    const double G6_7_1_0 = det*w[2][7]*w[2][1]*K[0]*(1.0);
    const double G6_7_2_1 = det*w[2][7]*w[2][2]*K[2]*(1.0);
    const double G6_7_3_0 = det*w[2][7]*w[2][3]*K[0]*(1.0);
    const double G6_7_3_1 = det*w[2][7]*w[2][3]*K[2]*(1.0);
    const double G6_7_4_0 = det*w[2][7]*w[2][4]*K[0]*(1.0);
    const double G6_7_4_1 = det*w[2][7]*w[2][4]*K[2]*(1.0);
    const double G6_7_5_0 = det*w[2][7]*w[2][5]*K[0]*(1.0);
    const double G6_7_5_1 = det*w[2][7]*w[2][5]*K[2]*(1.0);
    const double G6_8_0_0 = det*w[2][8]*w[2][0]*K[0]*(1.0);
    const double G6_8_0_1 = det*w[2][8]*w[2][0]*K[2]*(1.0);
    const double G6_8_1_0 = det*w[2][8]*w[2][1]*K[0]*(1.0);
    const double G6_8_2_1 = det*w[2][8]*w[2][2]*K[2]*(1.0);
    const double G6_8_3_0 = det*w[2][8]*w[2][3]*K[0]*(1.0);
    const double G6_8_3_1 = det*w[2][8]*w[2][3]*K[2]*(1.0);
    const double G6_8_4_0 = det*w[2][8]*w[2][4]*K[0]*(1.0);
    const double G6_8_4_1 = det*w[2][8]*w[2][4]*K[2]*(1.0);
    const double G6_8_5_0 = det*w[2][8]*w[2][5]*K[0]*(1.0);
    const double G6_8_5_1 = det*w[2][8]*w[2][5]*K[2]*(1.0);
    const double G6_9_0_0 = det*w[2][9]*w[2][0]*K[0]*(1.0);
    const double G6_9_0_1 = det*w[2][9]*w[2][0]*K[2]*(1.0);
    const double G6_9_1_0 = det*w[2][9]*w[2][1]*K[0]*(1.0);
    const double G6_9_2_1 = det*w[2][9]*w[2][2]*K[2]*(1.0);
    const double G6_9_3_0 = det*w[2][9]*w[2][3]*K[0]*(1.0);
    const double G6_9_3_1 = det*w[2][9]*w[2][3]*K[2]*(1.0);
    const double G6_9_4_0 = det*w[2][9]*w[2][4]*K[0]*(1.0);
    const double G6_9_4_1 = det*w[2][9]*w[2][4]*K[2]*(1.0);
    const double G6_9_5_0 = det*w[2][9]*w[2][5]*K[0]*(1.0);
    const double G6_9_5_1 = det*w[2][9]*w[2][5]*K[2]*(1.0);
    const double G6_10_0_0 = det*w[2][10]*w[2][0]*K[0]*(1.0);
    const double G6_10_0_1 = det*w[2][10]*w[2][0]*K[2]*(1.0);
    const double G6_10_1_0 = det*w[2][10]*w[2][1]*K[0]*(1.0);
    const double G6_10_2_1 = det*w[2][10]*w[2][2]*K[2]*(1.0);
    const double G6_10_3_0 = det*w[2][10]*w[2][3]*K[0]*(1.0);
    const double G6_10_3_1 = det*w[2][10]*w[2][3]*K[2]*(1.0);
    const double G6_10_4_0 = det*w[2][10]*w[2][4]*K[0]*(1.0);
    const double G6_10_4_1 = det*w[2][10]*w[2][4]*K[2]*(1.0);
    const double G6_10_5_0 = det*w[2][10]*w[2][5]*K[0]*(1.0);
    const double G6_10_5_1 = det*w[2][10]*w[2][5]*K[2]*(1.0);
    const double G6_11_0_0 = det*w[2][11]*w[2][0]*K[0]*(1.0);
    const double G6_11_0_1 = det*w[2][11]*w[2][0]*K[2]*(1.0);
    const double G6_11_1_0 = det*w[2][11]*w[2][1]*K[0]*(1.0);
    const double G6_11_2_1 = det*w[2][11]*w[2][2]*K[2]*(1.0);
    const double G6_11_3_0 = det*w[2][11]*w[2][3]*K[0]*(1.0);
    const double G6_11_3_1 = det*w[2][11]*w[2][3]*K[2]*(1.0);
    const double G6_11_4_0 = det*w[2][11]*w[2][4]*K[0]*(1.0);
    const double G6_11_4_1 = det*w[2][11]*w[2][4]*K[2]*(1.0);
    const double G6_11_5_0 = det*w[2][11]*w[2][5]*K[0]*(1.0);
    const double G6_11_5_1 = det*w[2][11]*w[2][5]*K[2]*(1.0);
    const double G7_6_6_0 = det*w[2][6]*w[2][6]*K[1]*(1.0);
    const double G7_6_6_1 = det*w[2][6]*w[2][6]*K[3]*(1.0);
    const double G7_6_7_0 = det*w[2][6]*w[2][7]*K[1]*(1.0);
    const double G7_6_8_1 = det*w[2][6]*w[2][8]*K[3]*(1.0);
    const double G7_6_9_0 = det*w[2][6]*w[2][9]*K[1]*(1.0);
    const double G7_6_9_1 = det*w[2][6]*w[2][9]*K[3]*(1.0);
    const double G7_6_10_0 = det*w[2][6]*w[2][10]*K[1]*(1.0);
    const double G7_6_10_1 = det*w[2][6]*w[2][10]*K[3]*(1.0);
    const double G7_6_11_0 = det*w[2][6]*w[2][11]*K[1]*(1.0);
    const double G7_6_11_1 = det*w[2][6]*w[2][11]*K[3]*(1.0);
    const double G7_7_6_0 = det*w[2][7]*w[2][6]*K[1]*(1.0);
    const double G7_7_6_1 = det*w[2][7]*w[2][6]*K[3]*(1.0);
    const double G7_7_7_0 = det*w[2][7]*w[2][7]*K[1]*(1.0);
    const double G7_7_8_1 = det*w[2][7]*w[2][8]*K[3]*(1.0);
    const double G7_7_9_0 = det*w[2][7]*w[2][9]*K[1]*(1.0);
    const double G7_7_9_1 = det*w[2][7]*w[2][9]*K[3]*(1.0);
    const double G7_7_10_0 = det*w[2][7]*w[2][10]*K[1]*(1.0);
    const double G7_7_10_1 = det*w[2][7]*w[2][10]*K[3]*(1.0);
    const double G7_7_11_0 = det*w[2][7]*w[2][11]*K[1]*(1.0);
    const double G7_7_11_1 = det*w[2][7]*w[2][11]*K[3]*(1.0);
    const double G7_8_6_0 = det*w[2][8]*w[2][6]*K[1]*(1.0);
    const double G7_8_6_1 = det*w[2][8]*w[2][6]*K[3]*(1.0);
    const double G7_8_7_0 = det*w[2][8]*w[2][7]*K[1]*(1.0);
    const double G7_8_8_1 = det*w[2][8]*w[2][8]*K[3]*(1.0);
    const double G7_8_9_0 = det*w[2][8]*w[2][9]*K[1]*(1.0);
    const double G7_8_9_1 = det*w[2][8]*w[2][9]*K[3]*(1.0);
    const double G7_8_10_0 = det*w[2][8]*w[2][10]*K[1]*(1.0);
    const double G7_8_10_1 = det*w[2][8]*w[2][10]*K[3]*(1.0);
    const double G7_8_11_0 = det*w[2][8]*w[2][11]*K[1]*(1.0);
    const double G7_8_11_1 = det*w[2][8]*w[2][11]*K[3]*(1.0);
    const double G7_9_6_0 = det*w[2][9]*w[2][6]*K[1]*(1.0);
    const double G7_9_6_1 = det*w[2][9]*w[2][6]*K[3]*(1.0);
    const double G7_9_7_0 = det*w[2][9]*w[2][7]*K[1]*(1.0);
    const double G7_9_8_1 = det*w[2][9]*w[2][8]*K[3]*(1.0);
    const double G7_9_9_0 = det*w[2][9]*w[2][9]*K[1]*(1.0);
    const double G7_9_9_1 = det*w[2][9]*w[2][9]*K[3]*(1.0);
    const double G7_9_10_0 = det*w[2][9]*w[2][10]*K[1]*(1.0);
    const double G7_9_10_1 = det*w[2][9]*w[2][10]*K[3]*(1.0);
    const double G7_9_11_0 = det*w[2][9]*w[2][11]*K[1]*(1.0);
    const double G7_9_11_1 = det*w[2][9]*w[2][11]*K[3]*(1.0);
    const double G7_10_6_0 = det*w[2][10]*w[2][6]*K[1]*(1.0);
    const double G7_10_6_1 = det*w[2][10]*w[2][6]*K[3]*(1.0);
    const double G7_10_7_0 = det*w[2][10]*w[2][7]*K[1]*(1.0);
    const double G7_10_8_1 = det*w[2][10]*w[2][8]*K[3]*(1.0);
    const double G7_10_9_0 = det*w[2][10]*w[2][9]*K[1]*(1.0);
    const double G7_10_9_1 = det*w[2][10]*w[2][9]*K[3]*(1.0);
    const double G7_10_10_0 = det*w[2][10]*w[2][10]*K[1]*(1.0);
    const double G7_10_10_1 = det*w[2][10]*w[2][10]*K[3]*(1.0);
    const double G7_10_11_0 = det*w[2][10]*w[2][11]*K[1]*(1.0);
    const double G7_10_11_1 = det*w[2][10]*w[2][11]*K[3]*(1.0);
    const double G7_11_6_0 = det*w[2][11]*w[2][6]*K[1]*(1.0);
    const double G7_11_6_1 = det*w[2][11]*w[2][6]*K[3]*(1.0);
    const double G7_11_7_0 = det*w[2][11]*w[2][7]*K[1]*(1.0);
    const double G7_11_8_1 = det*w[2][11]*w[2][8]*K[3]*(1.0);
    const double G7_11_9_0 = det*w[2][11]*w[2][9]*K[1]*(1.0);
    const double G7_11_9_1 = det*w[2][11]*w[2][9]*K[3]*(1.0);
    const double G7_11_10_0 = det*w[2][11]*w[2][10]*K[1]*(1.0);
    const double G7_11_10_1 = det*w[2][11]*w[2][10]*K[3]*(1.0);
    const double G7_11_11_0 = det*w[2][11]*w[2][11]*K[1]*(1.0);
    const double G7_11_11_1 = det*w[2][11]*w[2][11]*K[3]*(1.0);
    const double G8_0_0_0 = det*w[2][0]*w[2][0]*K[0]*(1.0);
    const double G8_0_0_1 = det*w[2][0]*w[2][0]*K[2]*(1.0);
    const double G8_0_1_0 = det*w[2][0]*w[2][1]*K[0]*(1.0);
    const double G8_0_2_1 = det*w[2][0]*w[2][2]*K[2]*(1.0);
    const double G8_0_3_0 = det*w[2][0]*w[2][3]*K[0]*(1.0);
    const double G8_0_3_1 = det*w[2][0]*w[2][3]*K[2]*(1.0);
    const double G8_0_4_0 = det*w[2][0]*w[2][4]*K[0]*(1.0);
    const double G8_0_4_1 = det*w[2][0]*w[2][4]*K[2]*(1.0);
    const double G8_0_5_0 = det*w[2][0]*w[2][5]*K[0]*(1.0);
    const double G8_0_5_1 = det*w[2][0]*w[2][5]*K[2]*(1.0);
    const double G8_1_0_0 = det*w[2][1]*w[2][0]*K[0]*(1.0);
    const double G8_1_0_1 = det*w[2][1]*w[2][0]*K[2]*(1.0);
    const double G8_1_1_0 = det*w[2][1]*w[2][1]*K[0]*(1.0);
    const double G8_1_2_1 = det*w[2][1]*w[2][2]*K[2]*(1.0);
    const double G8_1_3_0 = det*w[2][1]*w[2][3]*K[0]*(1.0);
    const double G8_1_3_1 = det*w[2][1]*w[2][3]*K[2]*(1.0);
    const double G8_1_4_0 = det*w[2][1]*w[2][4]*K[0]*(1.0);
    const double G8_1_4_1 = det*w[2][1]*w[2][4]*K[2]*(1.0);
    const double G8_1_5_0 = det*w[2][1]*w[2][5]*K[0]*(1.0);
    const double G8_1_5_1 = det*w[2][1]*w[2][5]*K[2]*(1.0);
    const double G8_2_0_0 = det*w[2][2]*w[2][0]*K[0]*(1.0);
    const double G8_2_0_1 = det*w[2][2]*w[2][0]*K[2]*(1.0);
    const double G8_2_1_0 = det*w[2][2]*w[2][1]*K[0]*(1.0);
    const double G8_2_2_1 = det*w[2][2]*w[2][2]*K[2]*(1.0);
    const double G8_2_3_0 = det*w[2][2]*w[2][3]*K[0]*(1.0);
    const double G8_2_3_1 = det*w[2][2]*w[2][3]*K[2]*(1.0);
    const double G8_2_4_0 = det*w[2][2]*w[2][4]*K[0]*(1.0);
    const double G8_2_4_1 = det*w[2][2]*w[2][4]*K[2]*(1.0);
    const double G8_2_5_0 = det*w[2][2]*w[2][5]*K[0]*(1.0);
    const double G8_2_5_1 = det*w[2][2]*w[2][5]*K[2]*(1.0);
    const double G8_3_0_0 = det*w[2][3]*w[2][0]*K[0]*(1.0);
    const double G8_3_0_1 = det*w[2][3]*w[2][0]*K[2]*(1.0);
    const double G8_3_1_0 = det*w[2][3]*w[2][1]*K[0]*(1.0);
    const double G8_3_2_1 = det*w[2][3]*w[2][2]*K[2]*(1.0);
    const double G8_3_3_0 = det*w[2][3]*w[2][3]*K[0]*(1.0);
    const double G8_3_3_1 = det*w[2][3]*w[2][3]*K[2]*(1.0);
    const double G8_3_4_0 = det*w[2][3]*w[2][4]*K[0]*(1.0);
    const double G8_3_4_1 = det*w[2][3]*w[2][4]*K[2]*(1.0);
    const double G8_3_5_0 = det*w[2][3]*w[2][5]*K[0]*(1.0);
    const double G8_3_5_1 = det*w[2][3]*w[2][5]*K[2]*(1.0);
    const double G8_4_0_0 = det*w[2][4]*w[2][0]*K[0]*(1.0);
    const double G8_4_0_1 = det*w[2][4]*w[2][0]*K[2]*(1.0);
    const double G8_4_1_0 = det*w[2][4]*w[2][1]*K[0]*(1.0);
    const double G8_4_2_1 = det*w[2][4]*w[2][2]*K[2]*(1.0);
    const double G8_4_3_0 = det*w[2][4]*w[2][3]*K[0]*(1.0);
    const double G8_4_3_1 = det*w[2][4]*w[2][3]*K[2]*(1.0);
    const double G8_4_4_0 = det*w[2][4]*w[2][4]*K[0]*(1.0);
    const double G8_4_4_1 = det*w[2][4]*w[2][4]*K[2]*(1.0);
    const double G8_4_5_0 = det*w[2][4]*w[2][5]*K[0]*(1.0);
    const double G8_4_5_1 = det*w[2][4]*w[2][5]*K[2]*(1.0);
    const double G8_5_0_0 = det*w[2][5]*w[2][0]*K[0]*(1.0);
    const double G8_5_0_1 = det*w[2][5]*w[2][0]*K[2]*(1.0);
    const double G8_5_1_0 = det*w[2][5]*w[2][1]*K[0]*(1.0);
    const double G8_5_2_1 = det*w[2][5]*w[2][2]*K[2]*(1.0);
    const double G8_5_3_0 = det*w[2][5]*w[2][3]*K[0]*(1.0);
    const double G8_5_3_1 = det*w[2][5]*w[2][3]*K[2]*(1.0);
    const double G8_5_4_0 = det*w[2][5]*w[2][4]*K[0]*(1.0);
    const double G8_5_4_1 = det*w[2][5]*w[2][4]*K[2]*(1.0);
    const double G8_5_5_0 = det*w[2][5]*w[2][5]*K[0]*(1.0);
    const double G8_5_5_1 = det*w[2][5]*w[2][5]*K[2]*(1.0);
    const double G9_0_0_6 = det*w[2][0]*w[2][6]*K[1]*(1.0);
    const double G9_0_0_7 = det*w[2][0]*w[2][7]*K[1]*(1.0);
    const double G9_0_0_8 = det*w[2][0]*w[2][8]*K[1]*(1.0);
    const double G9_0_0_9 = det*w[2][0]*w[2][9]*K[1]*(1.0);
    const double G9_0_0_10 = det*w[2][0]*w[2][10]*K[1]*(1.0);
    const double G9_0_0_11 = det*w[2][0]*w[2][11]*K[1]*(1.0);
    const double G9_0_1_6 = det*w[2][0]*w[2][6]*K[3]*(1.0);
    const double G9_0_1_7 = det*w[2][0]*w[2][7]*K[3]*(1.0);
    const double G9_0_1_8 = det*w[2][0]*w[2][8]*K[3]*(1.0);
    const double G9_0_1_9 = det*w[2][0]*w[2][9]*K[3]*(1.0);
    const double G9_0_1_10 = det*w[2][0]*w[2][10]*K[3]*(1.0);
    const double G9_0_1_11 = det*w[2][0]*w[2][11]*K[3]*(1.0);
    const double G9_1_0_6 = det*w[2][1]*w[2][6]*K[1]*(1.0);
    const double G9_1_0_7 = det*w[2][1]*w[2][7]*K[1]*(1.0);
    const double G9_1_0_8 = det*w[2][1]*w[2][8]*K[1]*(1.0);
    const double G9_1_0_9 = det*w[2][1]*w[2][9]*K[1]*(1.0);
    const double G9_1_0_10 = det*w[2][1]*w[2][10]*K[1]*(1.0);
    const double G9_1_0_11 = det*w[2][1]*w[2][11]*K[1]*(1.0);
    const double G9_2_1_6 = det*w[2][2]*w[2][6]*K[3]*(1.0);
    const double G9_2_1_7 = det*w[2][2]*w[2][7]*K[3]*(1.0);
    const double G9_2_1_8 = det*w[2][2]*w[2][8]*K[3]*(1.0);
    const double G9_2_1_9 = det*w[2][2]*w[2][9]*K[3]*(1.0);
    const double G9_2_1_10 = det*w[2][2]*w[2][10]*K[3]*(1.0);
    const double G9_2_1_11 = det*w[2][2]*w[2][11]*K[3]*(1.0);
    const double G9_3_0_6 = det*w[2][3]*w[2][6]*K[1]*(1.0);
    const double G9_3_0_7 = det*w[2][3]*w[2][7]*K[1]*(1.0);
    const double G9_3_0_8 = det*w[2][3]*w[2][8]*K[1]*(1.0);
    const double G9_3_0_9 = det*w[2][3]*w[2][9]*K[1]*(1.0);
    const double G9_3_0_10 = det*w[2][3]*w[2][10]*K[1]*(1.0);
    const double G9_3_0_11 = det*w[2][3]*w[2][11]*K[1]*(1.0);
    const double G9_3_1_6 = det*w[2][3]*w[2][6]*K[3]*(1.0);
    const double G9_3_1_7 = det*w[2][3]*w[2][7]*K[3]*(1.0);
    const double G9_3_1_8 = det*w[2][3]*w[2][8]*K[3]*(1.0);
    const double G9_3_1_9 = det*w[2][3]*w[2][9]*K[3]*(1.0);
    const double G9_3_1_10 = det*w[2][3]*w[2][10]*K[3]*(1.0);
    const double G9_3_1_11 = det*w[2][3]*w[2][11]*K[3]*(1.0);
    const double G9_4_0_6 = det*w[2][4]*w[2][6]*K[1]*(1.0);
    const double G9_4_0_7 = det*w[2][4]*w[2][7]*K[1]*(1.0);
    const double G9_4_0_8 = det*w[2][4]*w[2][8]*K[1]*(1.0);
    const double G9_4_0_9 = det*w[2][4]*w[2][9]*K[1]*(1.0);
    const double G9_4_0_10 = det*w[2][4]*w[2][10]*K[1]*(1.0);
    const double G9_4_0_11 = det*w[2][4]*w[2][11]*K[1]*(1.0);
    const double G9_4_1_6 = det*w[2][4]*w[2][6]*K[3]*(1.0);
    const double G9_4_1_7 = det*w[2][4]*w[2][7]*K[3]*(1.0);
    const double G9_4_1_8 = det*w[2][4]*w[2][8]*K[3]*(1.0);
    const double G9_4_1_9 = det*w[2][4]*w[2][9]*K[3]*(1.0);
    const double G9_4_1_10 = det*w[2][4]*w[2][10]*K[3]*(1.0);
    const double G9_4_1_11 = det*w[2][4]*w[2][11]*K[3]*(1.0);
    const double G9_5_0_6 = det*w[2][5]*w[2][6]*K[1]*(1.0);
    const double G9_5_0_7 = det*w[2][5]*w[2][7]*K[1]*(1.0);
    const double G9_5_0_8 = det*w[2][5]*w[2][8]*K[1]*(1.0);
    const double G9_5_0_9 = det*w[2][5]*w[2][9]*K[1]*(1.0);
    const double G9_5_0_10 = det*w[2][5]*w[2][10]*K[1]*(1.0);
    const double G9_5_0_11 = det*w[2][5]*w[2][11]*K[1]*(1.0);
    const double G9_5_1_6 = det*w[2][5]*w[2][6]*K[3]*(1.0);
    const double G9_5_1_7 = det*w[2][5]*w[2][7]*K[3]*(1.0);
    const double G9_5_1_8 = det*w[2][5]*w[2][8]*K[3]*(1.0);
    const double G9_5_1_9 = det*w[2][5]*w[2][9]*K[3]*(1.0);
    const double G9_5_1_10 = det*w[2][5]*w[2][10]*K[3]*(1.0);
    const double G9_5_1_11 = det*w[2][5]*w[2][11]*K[3]*(1.0);
    const double G10_0_6_0 = det*w[2][0]*w[2][6]*K[0]*(1.0);
    const double G10_0_6_1 = det*w[2][0]*w[2][6]*K[2]*(1.0);
    const double G10_0_7_0 = det*w[2][0]*w[2][7]*K[0]*(1.0);
    const double G10_0_8_1 = det*w[2][0]*w[2][8]*K[2]*(1.0);
    const double G10_0_9_0 = det*w[2][0]*w[2][9]*K[0]*(1.0);
    const double G10_0_9_1 = det*w[2][0]*w[2][9]*K[2]*(1.0);
    const double G10_0_10_0 = det*w[2][0]*w[2][10]*K[0]*(1.0);
    const double G10_0_10_1 = det*w[2][0]*w[2][10]*K[2]*(1.0);
    const double G10_0_11_0 = det*w[2][0]*w[2][11]*K[0]*(1.0);
    const double G10_0_11_1 = det*w[2][0]*w[2][11]*K[2]*(1.0);
    const double G10_1_6_0 = det*w[2][1]*w[2][6]*K[0]*(1.0);
    const double G10_1_6_1 = det*w[2][1]*w[2][6]*K[2]*(1.0);
    const double G10_1_7_0 = det*w[2][1]*w[2][7]*K[0]*(1.0);
    const double G10_1_8_1 = det*w[2][1]*w[2][8]*K[2]*(1.0);
    const double G10_1_9_0 = det*w[2][1]*w[2][9]*K[0]*(1.0);
    const double G10_1_9_1 = det*w[2][1]*w[2][9]*K[2]*(1.0);
    const double G10_1_10_0 = det*w[2][1]*w[2][10]*K[0]*(1.0);
    const double G10_1_10_1 = det*w[2][1]*w[2][10]*K[2]*(1.0);
    const double G10_1_11_0 = det*w[2][1]*w[2][11]*K[0]*(1.0);
    const double G10_1_11_1 = det*w[2][1]*w[2][11]*K[2]*(1.0);
    const double G10_2_6_0 = det*w[2][2]*w[2][6]*K[0]*(1.0);
    const double G10_2_6_1 = det*w[2][2]*w[2][6]*K[2]*(1.0);
    const double G10_2_7_0 = det*w[2][2]*w[2][7]*K[0]*(1.0);
    const double G10_2_8_1 = det*w[2][2]*w[2][8]*K[2]*(1.0);
    const double G10_2_9_0 = det*w[2][2]*w[2][9]*K[0]*(1.0);
    const double G10_2_9_1 = det*w[2][2]*w[2][9]*K[2]*(1.0);
    const double G10_2_10_0 = det*w[2][2]*w[2][10]*K[0]*(1.0);
    const double G10_2_10_1 = det*w[2][2]*w[2][10]*K[2]*(1.0);
    const double G10_2_11_0 = det*w[2][2]*w[2][11]*K[0]*(1.0);
    const double G10_2_11_1 = det*w[2][2]*w[2][11]*K[2]*(1.0);
    const double G10_3_6_0 = det*w[2][3]*w[2][6]*K[0]*(1.0);
    const double G10_3_6_1 = det*w[2][3]*w[2][6]*K[2]*(1.0);
    const double G10_3_7_0 = det*w[2][3]*w[2][7]*K[0]*(1.0);
    const double G10_3_8_1 = det*w[2][3]*w[2][8]*K[2]*(1.0);
    const double G10_3_9_0 = det*w[2][3]*w[2][9]*K[0]*(1.0);
    const double G10_3_9_1 = det*w[2][3]*w[2][9]*K[2]*(1.0);
    const double G10_3_10_0 = det*w[2][3]*w[2][10]*K[0]*(1.0);
    const double G10_3_10_1 = det*w[2][3]*w[2][10]*K[2]*(1.0);
    const double G10_3_11_0 = det*w[2][3]*w[2][11]*K[0]*(1.0);
    const double G10_3_11_1 = det*w[2][3]*w[2][11]*K[2]*(1.0);
    const double G10_4_6_0 = det*w[2][4]*w[2][6]*K[0]*(1.0);
    const double G10_4_6_1 = det*w[2][4]*w[2][6]*K[2]*(1.0);
    const double G10_4_7_0 = det*w[2][4]*w[2][7]*K[0]*(1.0);
    const double G10_4_8_1 = det*w[2][4]*w[2][8]*K[2]*(1.0);
    const double G10_4_9_0 = det*w[2][4]*w[2][9]*K[0]*(1.0);
    const double G10_4_9_1 = det*w[2][4]*w[2][9]*K[2]*(1.0);
    const double G10_4_10_0 = det*w[2][4]*w[2][10]*K[0]*(1.0);
    const double G10_4_10_1 = det*w[2][4]*w[2][10]*K[2]*(1.0);
    const double G10_4_11_0 = det*w[2][4]*w[2][11]*K[0]*(1.0);
    const double G10_4_11_1 = det*w[2][4]*w[2][11]*K[2]*(1.0);
    const double G10_5_6_0 = det*w[2][5]*w[2][6]*K[0]*(1.0);
    const double G10_5_6_1 = det*w[2][5]*w[2][6]*K[2]*(1.0);
    const double G10_5_7_0 = det*w[2][5]*w[2][7]*K[0]*(1.0);
    const double G10_5_8_1 = det*w[2][5]*w[2][8]*K[2]*(1.0);
    const double G10_5_9_0 = det*w[2][5]*w[2][9]*K[0]*(1.0);
    const double G10_5_9_1 = det*w[2][5]*w[2][9]*K[2]*(1.0);
    const double G10_5_10_0 = det*w[2][5]*w[2][10]*K[0]*(1.0);
    const double G10_5_10_1 = det*w[2][5]*w[2][10]*K[2]*(1.0);
    const double G10_5_11_0 = det*w[2][5]*w[2][11]*K[0]*(1.0);
    const double G10_5_11_1 = det*w[2][5]*w[2][11]*K[2]*(1.0);
    const double G11_6_6_0 = det*w[2][6]*w[2][6]*K[1]*(1.0);
    const double G11_6_6_1 = det*w[2][6]*w[2][6]*K[3]*(1.0);
    const double G11_6_7_0 = det*w[2][6]*w[2][7]*K[1]*(1.0);
    const double G11_6_8_1 = det*w[2][6]*w[2][8]*K[3]*(1.0);
    const double G11_6_9_0 = det*w[2][6]*w[2][9]*K[1]*(1.0);
    const double G11_6_9_1 = det*w[2][6]*w[2][9]*K[3]*(1.0);
    const double G11_6_10_0 = det*w[2][6]*w[2][10]*K[1]*(1.0);
    const double G11_6_10_1 = det*w[2][6]*w[2][10]*K[3]*(1.0);
    const double G11_6_11_0 = det*w[2][6]*w[2][11]*K[1]*(1.0);
    const double G11_6_11_1 = det*w[2][6]*w[2][11]*K[3]*(1.0);
    const double G11_7_6_0 = det*w[2][7]*w[2][6]*K[1]*(1.0);
    const double G11_7_6_1 = det*w[2][7]*w[2][6]*K[3]*(1.0);
    const double G11_7_7_0 = det*w[2][7]*w[2][7]*K[1]*(1.0);
    const double G11_7_8_1 = det*w[2][7]*w[2][8]*K[3]*(1.0);
    const double G11_7_9_0 = det*w[2][7]*w[2][9]*K[1]*(1.0);
    const double G11_7_9_1 = det*w[2][7]*w[2][9]*K[3]*(1.0);
    const double G11_7_10_0 = det*w[2][7]*w[2][10]*K[1]*(1.0);
    const double G11_7_10_1 = det*w[2][7]*w[2][10]*K[3]*(1.0);
    const double G11_7_11_0 = det*w[2][7]*w[2][11]*K[1]*(1.0);
    const double G11_7_11_1 = det*w[2][7]*w[2][11]*K[3]*(1.0);
    const double G11_8_6_0 = det*w[2][8]*w[2][6]*K[1]*(1.0);
    const double G11_8_6_1 = det*w[2][8]*w[2][6]*K[3]*(1.0);
    const double G11_8_7_0 = det*w[2][8]*w[2][7]*K[1]*(1.0);
    const double G11_8_8_1 = det*w[2][8]*w[2][8]*K[3]*(1.0);
    const double G11_8_9_0 = det*w[2][8]*w[2][9]*K[1]*(1.0);
    const double G11_8_9_1 = det*w[2][8]*w[2][9]*K[3]*(1.0);
    const double G11_8_10_0 = det*w[2][8]*w[2][10]*K[1]*(1.0);
    const double G11_8_10_1 = det*w[2][8]*w[2][10]*K[3]*(1.0);
    const double G11_8_11_0 = det*w[2][8]*w[2][11]*K[1]*(1.0);
    const double G11_8_11_1 = det*w[2][8]*w[2][11]*K[3]*(1.0);
    const double G11_9_6_0 = det*w[2][9]*w[2][6]*K[1]*(1.0);
    const double G11_9_6_1 = det*w[2][9]*w[2][6]*K[3]*(1.0);
    const double G11_9_7_0 = det*w[2][9]*w[2][7]*K[1]*(1.0);
    const double G11_9_8_1 = det*w[2][9]*w[2][8]*K[3]*(1.0);
    const double G11_9_9_0 = det*w[2][9]*w[2][9]*K[1]*(1.0);
    const double G11_9_9_1 = det*w[2][9]*w[2][9]*K[3]*(1.0);
    const double G11_9_10_0 = det*w[2][9]*w[2][10]*K[1]*(1.0);
    const double G11_9_10_1 = det*w[2][9]*w[2][10]*K[3]*(1.0);
    const double G11_9_11_0 = det*w[2][9]*w[2][11]*K[1]*(1.0);
    const double G11_9_11_1 = det*w[2][9]*w[2][11]*K[3]*(1.0);
    const double G11_10_6_0 = det*w[2][10]*w[2][6]*K[1]*(1.0);
    const double G11_10_6_1 = det*w[2][10]*w[2][6]*K[3]*(1.0);
    const double G11_10_7_0 = det*w[2][10]*w[2][7]*K[1]*(1.0);
    const double G11_10_8_1 = det*w[2][10]*w[2][8]*K[3]*(1.0);
    const double G11_10_9_0 = det*w[2][10]*w[2][9]*K[1]*(1.0);
    const double G11_10_9_1 = det*w[2][10]*w[2][9]*K[3]*(1.0);
    const double G11_10_10_0 = det*w[2][10]*w[2][10]*K[1]*(1.0);
    const double G11_10_10_1 = det*w[2][10]*w[2][10]*K[3]*(1.0);
    const double G11_10_11_0 = det*w[2][10]*w[2][11]*K[1]*(1.0);
    const double G11_10_11_1 = det*w[2][10]*w[2][11]*K[3]*(1.0);
    const double G11_11_6_0 = det*w[2][11]*w[2][6]*K[1]*(1.0);
    const double G11_11_6_1 = det*w[2][11]*w[2][6]*K[3]*(1.0);
    const double G11_11_7_0 = det*w[2][11]*w[2][7]*K[1]*(1.0);
    const double G11_11_8_1 = det*w[2][11]*w[2][8]*K[3]*(1.0);
    const double G11_11_9_0 = det*w[2][11]*w[2][9]*K[1]*(1.0);
    const double G11_11_9_1 = det*w[2][11]*w[2][9]*K[3]*(1.0);
    const double G11_11_10_0 = det*w[2][11]*w[2][10]*K[1]*(1.0);
    const double G11_11_10_1 = det*w[2][11]*w[2][10]*K[3]*(1.0);
    const double G11_11_11_0 = det*w[2][11]*w[2][11]*K[1]*(1.0);
    const double G11_11_11_1 = det*w[2][11]*w[2][11]*K[3]*(1.0);
    const double G12_0_0_0 = det*w[2][0]*K[0]*K[0]*(1.0);
    const double G12_0_0_1 = det*w[2][0]*K[0]*K[2]*(1.0);
    const double G12_0_1_0 = det*w[2][1]*K[0]*K[0]*(1.0);
    const double G12_0_2_1 = det*w[2][2]*K[0]*K[2]*(1.0);
    const double G12_0_3_0 = det*w[2][3]*K[0]*K[0]*(1.0);
    const double G12_0_3_1 = det*w[2][3]*K[0]*K[2]*(1.0);
    const double G12_0_4_0 = det*w[2][4]*K[0]*K[0]*(1.0);
    const double G12_0_4_1 = det*w[2][4]*K[0]*K[2]*(1.0);
    const double G12_0_5_0 = det*w[2][5]*K[0]*K[0]*(1.0);
    const double G12_0_5_1 = det*w[2][5]*K[0]*K[2]*(1.0);
    const double G12_1_0_0 = det*w[2][0]*K[2]*K[0]*(1.0);
    const double G12_1_0_1 = det*w[2][0]*K[2]*K[2]*(1.0);
    const double G12_1_1_0 = det*w[2][1]*K[2]*K[0]*(1.0);
    const double G12_1_2_1 = det*w[2][2]*K[2]*K[2]*(1.0);
    const double G12_1_3_0 = det*w[2][3]*K[2]*K[0]*(1.0);
    const double G12_1_3_1 = det*w[2][3]*K[2]*K[2]*(1.0);
    const double G12_1_4_0 = det*w[2][4]*K[2]*K[0]*(1.0);
    const double G12_1_4_1 = det*w[2][4]*K[2]*K[2]*(1.0);
    const double G12_1_5_0 = det*w[2][5]*K[2]*K[0]*(1.0);
    const double G12_1_5_1 = det*w[2][5]*K[2]*K[2]*(1.0);
    const double G13_0_6_0 = det*w[2][6]*K[0]*K[0]*(1.0);
    const double G13_0_6_1 = det*w[2][6]*K[0]*K[2]*(1.0);
    const double G13_0_7_0 = det*w[2][7]*K[0]*K[0]*(1.0);
    const double G13_0_8_1 = det*w[2][8]*K[0]*K[2]*(1.0);
    const double G13_0_9_0 = det*w[2][9]*K[0]*K[0]*(1.0);
    const double G13_0_9_1 = det*w[2][9]*K[0]*K[2]*(1.0);
    const double G13_0_10_0 = det*w[2][10]*K[0]*K[0]*(1.0);
    const double G13_0_10_1 = det*w[2][10]*K[0]*K[2]*(1.0);
    const double G13_0_11_0 = det*w[2][11]*K[0]*K[0]*(1.0);
    const double G13_0_11_1 = det*w[2][11]*K[0]*K[2]*(1.0);
    const double G13_1_6_0 = det*w[2][6]*K[2]*K[0]*(1.0);
    const double G13_1_6_1 = det*w[2][6]*K[2]*K[2]*(1.0);
    const double G13_1_7_0 = det*w[2][7]*K[2]*K[0]*(1.0);
    const double G13_1_8_1 = det*w[2][8]*K[2]*K[2]*(1.0);
    const double G13_1_9_0 = det*w[2][9]*K[2]*K[0]*(1.0);
    const double G13_1_9_1 = det*w[2][9]*K[2]*K[2]*(1.0);
    const double G13_1_10_0 = det*w[2][10]*K[2]*K[0]*(1.0);
    const double G13_1_10_1 = det*w[2][10]*K[2]*K[2]*(1.0);
    const double G13_1_11_0 = det*w[2][11]*K[2]*K[0]*(1.0);
    const double G13_1_11_1 = det*w[2][11]*K[2]*K[2]*(1.0);
    const double G14_0_0_0 = det*w[2][0]*K[1]*K[1]*(1.0);
    const double G14_0_0_1 = det*w[2][0]*K[1]*K[3]*(1.0);
    const double G14_0_1_0 = det*w[2][1]*K[1]*K[1]*(1.0);
    const double G14_0_2_1 = det*w[2][2]*K[1]*K[3]*(1.0);
    const double G14_0_3_0 = det*w[2][3]*K[1]*K[1]*(1.0);
    const double G14_0_3_1 = det*w[2][3]*K[1]*K[3]*(1.0);
    const double G14_0_4_0 = det*w[2][4]*K[1]*K[1]*(1.0);
    const double G14_0_4_1 = det*w[2][4]*K[1]*K[3]*(1.0);
    const double G14_0_5_0 = det*w[2][5]*K[1]*K[1]*(1.0);
    const double G14_0_5_1 = det*w[2][5]*K[1]*K[3]*(1.0);
    const double G14_1_0_0 = det*w[2][0]*K[3]*K[1]*(1.0);
    const double G14_1_0_1 = det*w[2][0]*K[3]*K[3]*(1.0);
    const double G14_1_1_0 = det*w[2][1]*K[3]*K[1]*(1.0);
    const double G14_1_2_1 = det*w[2][2]*K[3]*K[3]*(1.0);
    const double G14_1_3_0 = det*w[2][3]*K[3]*K[1]*(1.0);
    const double G14_1_3_1 = det*w[2][3]*K[3]*K[3]*(1.0);
    const double G14_1_4_0 = det*w[2][4]*K[3]*K[1]*(1.0);
    const double G14_1_4_1 = det*w[2][4]*K[3]*K[3]*(1.0);
    const double G14_1_5_0 = det*w[2][5]*K[3]*K[1]*(1.0);
    const double G14_1_5_1 = det*w[2][5]*K[3]*K[3]*(1.0);
    const double G15_0_6_0 = det*w[2][6]*K[1]*K[1]*(1.0);
    const double G15_0_6_1 = det*w[2][6]*K[1]*K[3]*(1.0);
    const double G15_0_7_0 = det*w[2][7]*K[1]*K[1]*(1.0);
    const double G15_0_8_1 = det*w[2][8]*K[1]*K[3]*(1.0);
    const double G15_0_9_0 = det*w[2][9]*K[1]*K[1]*(1.0);
    const double G15_0_9_1 = det*w[2][9]*K[1]*K[3]*(1.0);
    const double G15_0_10_0 = det*w[2][10]*K[1]*K[1]*(1.0);
    const double G15_0_10_1 = det*w[2][10]*K[1]*K[3]*(1.0);
    const double G15_0_11_0 = det*w[2][11]*K[1]*K[1]*(1.0);
    const double G15_0_11_1 = det*w[2][11]*K[1]*K[3]*(1.0);
    const double G15_1_6_0 = det*w[2][6]*K[3]*K[1]*(1.0);
    const double G15_1_6_1 = det*w[2][6]*K[3]*K[3]*(1.0);
    const double G15_1_7_0 = det*w[2][7]*K[3]*K[1]*(1.0);
    const double G15_1_8_1 = det*w[2][8]*K[3]*K[3]*(1.0);
    const double G15_1_9_0 = det*w[2][9]*K[3]*K[1]*(1.0);
    const double G15_1_9_1 = det*w[2][9]*K[3]*K[3]*(1.0);
    const double G15_1_10_0 = det*w[2][10]*K[3]*K[1]*(1.0);
    const double G15_1_10_1 = det*w[2][10]*K[3]*K[3]*(1.0);
    const double G15_1_11_0 = det*w[2][11]*K[3]*K[1]*(1.0);
    const double G15_1_11_1 = det*w[2][11]*K[3]*K[3]*(1.0);
    const double G16_0 = det*w[1][0]*(1.0);
    const double G16_1 = det*w[1][1]*(1.0);
    const double G16_2 = det*w[1][2]*(1.0);
    const double G16_3 = det*w[1][3]*(1.0);
    const double G16_4 = det*w[1][4]*(1.0);
    const double G16_5 = det*w[1][5]*(1.0);
    const double G17_0 = det*w[0][0]*(1.0);
    const double G17_1 = det*w[0][1]*(1.0);
    const double G17_2 = det*w[0][2]*(1.0);
    const double G17_3 = det*w[0][3]*(1.0);
    const double G17_4 = det*w[0][4]*(1.0);
    const double G17_5 = det*w[0][5]*(1.0);
    const double G18_6 = det*w[1][6]*(1.0);
    const double G18_7 = det*w[1][7]*(1.0);
    const double G18_8 = det*w[1][8]*(1.0);
    const double G18_9 = det*w[1][9]*(1.0);
    const double G18_10 = det*w[1][10]*(1.0);
    const double G18_11 = det*w[1][11]*(1.0);
    const double G19_6 = det*w[0][6]*(1.0);
    const double G19_7 = det*w[0][7]*(1.0);
    const double G19_8 = det*w[0][8]*(1.0);
    const double G19_9 = det*w[0][9]*(1.0);
    const double G19_10 = det*w[0][10]*(1.0);
    const double G19_11 = det*w[0][11]*(1.0);
    
    // Compute element tensor
    A[0] = -0.166666666666667*G0_0_0 - 0.166666666666668*G0_0_1 + 0.0154761904761905*G4_0_0_0 + 0.0154761904761905*G4_0_0_1 + 0.00357142857142859*G4_0_1_0 + 0.00357142857142856*G4_0_2_1 - 0.00476190476190475*G4_0_3_0 - 0.00476190476190467*G4_0_3_1 + 0.00476190476190475*G4_0_4_0 - 0.0190476190476191*G4_0_4_1 - 0.0190476190476191*G4_0_5_0 + 0.00476190476190476*G4_0_5_1 - 0.00178571428571428*G4_1_0_0 - 0.00178571428571429*G4_1_0_1 + 0.00178571428571428*G4_1_1_0 - 0.00218253968253968*G4_1_2_1 - 0.000793650793650795*G4_1_3_0 + 0.00317460317460316*G4_1_3_1 + 0.000793650793650795*G4_1_4_0 + 0.00396825396825398*G4_1_4_1 - 0.00317460317460318*G4_1_5_1 - 0.00178571428571429*G4_2_0_0 - 0.00178571428571429*G4_2_0_1 - 0.00218253968253969*G4_2_1_0 + 0.00178571428571429*G4_2_2_1 + 0.00317460317460317*G4_2_3_0 - 0.000793650793650811*G4_2_3_1 - 0.00317460317460317*G4_2_4_0 + 0.00396825396825397*G4_2_5_0 + 0.000793650793650795*G4_2_5_1 + 0.00238095238095238*G4_3_0_0 + 0.00238095238095235*G4_3_0_1 + 0.00396825396825397*G4_3_1_0 + 0.00396825396825398*G4_3_2_1 + 0.00952380952380951*G4_3_3_0 + 0.00952380952380944*G4_3_3_1 - 0.00952380952380951*G4_3_4_0 - 0.00634920634920629*G4_3_4_1 - 0.00634920634920635*G4_3_5_0 - 0.00952380952380953*G4_3_5_1 + 0.00952380952380953*G4_4_0_0 + 0.00952380952380953*G4_4_0_1 + 0.00317460317460318*G4_4_1_0 + 0.00634920634920636*G4_4_2_1 + 0.00634920634920634*G4_4_3_0 + 0.00317460317460316*G4_4_3_1 - 0.00634920634920634*G4_4_4_0 - 0.0158730158730159*G4_4_4_1 - 0.0126984126984127*G4_4_5_0 - 0.00317460317460318*G4_4_5_1 + 0.00952380952380953*G4_5_0_0 + 0.00952380952380952*G4_5_0_1 + 0.00634920634920636*G4_5_1_0 + 0.00317460317460318*G4_5_2_1 + 0.00317460317460318*G4_5_3_0 + 0.00634920634920634*G4_5_3_1 - 0.00317460317460318*G4_5_4_0 - 0.0126984126984127*G4_5_4_1 - 0.0158730158730159*G4_5_5_0 - 0.00634920634920636*G4_5_5_1 + 0.0154761904761905*G5_0_6_0 + 0.0154761904761905*G5_0_6_1 + 0.00357142857142859*G5_0_7_0 + 0.00357142857142856*G5_0_8_1 - 0.00476190476190475*G5_0_9_0 - 0.00476190476190467*G5_0_9_1 + 0.00476190476190475*G5_0_10_0 - 0.0190476190476191*G5_0_10_1 - 0.0190476190476191*G5_0_11_0 + 0.00476190476190476*G5_0_11_1 - 0.00178571428571428*G5_1_6_0 - 0.00178571428571429*G5_1_6_1 + 0.00178571428571428*G5_1_7_0 - 0.00218253968253968*G5_1_8_1 - 0.000793650793650795*G5_1_9_0 + 0.00317460317460316*G5_1_9_1 + 0.000793650793650795*G5_1_10_0 + 0.00396825396825398*G5_1_10_1 - 0.00317460317460318*G5_1_11_1 - 0.00178571428571429*G5_2_6_0 - 0.00178571428571429*G5_2_6_1 - 0.00218253968253969*G5_2_7_0 + 0.00178571428571429*G5_2_8_1 + 0.00317460317460317*G5_2_9_0 - 0.000793650793650811*G5_2_9_1 - 0.00317460317460317*G5_2_10_0 + 0.00396825396825397*G5_2_11_0 + 0.000793650793650795*G5_2_11_1 + 0.00238095238095238*G5_3_6_0 + 0.00238095238095235*G5_3_6_1 + 0.00396825396825397*G5_3_7_0 + 0.00396825396825398*G5_3_8_1 + 0.00952380952380951*G5_3_9_0 + 0.00952380952380944*G5_3_9_1 - 0.00952380952380951*G5_3_10_0 - 0.00634920634920629*G5_3_10_1 - 0.00634920634920635*G5_3_11_0 - 0.00952380952380953*G5_3_11_1 + 0.00952380952380953*G5_4_6_0 + 0.00952380952380953*G5_4_6_1 + 0.00317460317460318*G5_4_7_0 + 0.00634920634920636*G5_4_8_1 + 0.00634920634920634*G5_4_9_0 + 0.00317460317460316*G5_4_9_1 - 0.00634920634920634*G5_4_10_0 - 0.0158730158730159*G5_4_10_1 - 0.0126984126984127*G5_4_11_0 - 0.00317460317460318*G5_4_11_1 + 0.00952380952380953*G5_5_6_0 + 0.00952380952380952*G5_5_6_1 + 0.00634920634920636*G5_5_7_0 + 0.00317460317460318*G5_5_8_1 + 0.00317460317460318*G5_5_9_0 + 0.00634920634920634*G5_5_9_1 - 0.00317460317460318*G5_5_10_0 - 0.0126984126984127*G5_5_10_1 - 0.0158730158730159*G5_5_11_0 - 0.00634920634920636*G5_5_11_1 + 0.030952380952381*G8_0_0_0 + 0.030952380952381*G8_0_0_1 + 0.00714285714285718*G8_0_1_0 + 0.00714285714285713*G8_0_2_1 - 0.0095238095238095*G8_0_3_0 - 0.00952380952380934*G8_0_3_1 + 0.0095238095238095*G8_0_4_0 - 0.0380952380952382*G8_0_4_1 - 0.0380952380952381*G8_0_5_0 + 0.00952380952380952*G8_0_5_1 - 0.00357142857142857*G8_1_0_0 - 0.00357142857142859*G8_1_0_1 + 0.00357142857142857*G8_1_1_0 - 0.00436507936507937*G8_1_2_1 - 0.00158730158730159*G8_1_3_0 + 0.00634920634920631*G8_1_3_1 + 0.00158730158730159*G8_1_4_0 + 0.00793650793650797*G8_1_4_1 - 0.00634920634920635*G8_1_5_1 - 0.00357142857142858*G8_2_0_0 - 0.00357142857142859*G8_2_0_1 - 0.00436507936507937*G8_2_1_0 + 0.00357142857142858*G8_2_2_1 + 0.00634920634920634*G8_2_3_0 - 0.00158730158730162*G8_2_3_1 - 0.00634920634920634*G8_2_4_0 + 0.00793650793650795*G8_2_5_0 + 0.00158730158730159*G8_2_5_1 + 0.00476190476190477*G8_3_0_0 + 0.0047619047619047*G8_3_0_1 + 0.00793650793650794*G8_3_1_0 + 0.00793650793650796*G8_3_2_1 + 0.019047619047619*G8_3_3_0 + 0.0190476190476189*G8_3_3_1 - 0.019047619047619*G8_3_4_0 - 0.0126984126984126*G8_3_4_1 - 0.0126984126984127*G8_3_5_0 - 0.0190476190476191*G8_3_5_1 + 0.0190476190476191*G8_4_0_0 + 0.0190476190476191*G8_4_0_1 + 0.00634920634920637*G8_4_1_0 + 0.0126984126984127*G8_4_2_1 + 0.0126984126984127*G8_4_3_0 + 0.00634920634920632*G8_4_3_1 - 0.0126984126984127*G8_4_4_0 - 0.0317460317460317*G8_4_4_1 - 0.0253968253968254*G8_4_5_0 - 0.00634920634920635*G8_4_5_1 + 0.0190476190476191*G8_5_0_0 + 0.019047619047619*G8_5_0_1 + 0.0126984126984127*G8_5_1_0 + 0.00634920634920636*G8_5_2_1 + 0.00634920634920635*G8_5_3_0 + 0.0126984126984127*G8_5_3_1 - 0.00634920634920635*G8_5_4_0 - 0.0253968253968254*G8_5_4_1 - 0.0317460317460318*G8_5_5_0 - 0.0126984126984127*G8_5_5_1 + 0.0309523809523809*G9_0_0_6 - 0.00357142857142857*G9_0_0_7 - 0.00357142857142858*G9_0_0_8 + 0.00476190476190477*G9_0_0_9 + 0.0190476190476191*G9_0_0_10 + 0.0190476190476191*G9_0_0_11 + 0.030952380952381*G9_0_1_6 - 0.00357142857142859*G9_0_1_7 - 0.00357142857142859*G9_0_1_8 + 0.0047619047619047*G9_0_1_9 + 0.0190476190476191*G9_0_1_10 + 0.019047619047619*G9_0_1_11 + 0.00714285714285718*G9_1_0_6 + 0.00357142857142857*G9_1_0_7 - 0.00436507936507937*G9_1_0_8 + 0.00793650793650794*G9_1_0_9 + 0.00634920634920637*G9_1_0_10 + 0.0126984126984127*G9_1_0_11 + 0.00714285714285713*G9_2_1_6 - 0.00436507936507937*G9_2_1_7 + 0.00357142857142858*G9_2_1_8 + 0.00793650793650796*G9_2_1_9 + 0.0126984126984127*G9_2_1_10 + 0.00634920634920636*G9_2_1_11 - 0.0095238095238095*G9_3_0_6 - 0.00158730158730159*G9_3_0_7 + 0.00634920634920634*G9_3_0_8 + 0.019047619047619*G9_3_0_9 + 0.0126984126984127*G9_3_0_10 + 0.00634920634920635*G9_3_0_11 - 0.00952380952380934*G9_3_1_6 + 0.00634920634920631*G9_3_1_7 - 0.00158730158730162*G9_3_1_8 + 0.0190476190476189*G9_3_1_9 + 0.00634920634920632*G9_3_1_10 + 0.0126984126984127*G9_3_1_11 + 0.0095238095238095*G9_4_0_6 + 0.00158730158730159*G9_4_0_7 - 0.00634920634920634*G9_4_0_8 - 0.019047619047619*G9_4_0_9 - 0.0126984126984127*G9_4_0_10 - 0.00634920634920635*G9_4_0_11 - 0.0380952380952382*G9_4_1_6 + 0.00793650793650797*G9_4_1_7 - 0.0126984126984126*G9_4_1_9 - 0.0317460317460317*G9_4_1_10 - 0.0253968253968254*G9_4_1_11 - 0.0380952380952381*G9_5_0_6 + 0.00793650793650795*G9_5_0_8 - 0.0126984126984127*G9_5_0_9 - 0.0253968253968254*G9_5_0_10 - 0.0317460317460318*G9_5_0_11 + 0.00952380952380952*G9_5_1_6 - 0.00634920634920635*G9_5_1_7 + 0.00158730158730159*G9_5_1_8 - 0.0190476190476191*G9_5_1_9 - 0.00634920634920635*G9_5_1_10 - 0.0126984126984127*G9_5_1_11 - 0.5*G12_0_0_0 - 0.5*G12_0_0_1 - 0.166666666666668*G12_0_1_0 - 0.166666666666666*G12_0_2_1 + 0.666666666666668*G12_0_4_1 + 0.666666666666668*G12_0_5_0 - 0.5*G12_1_0_0 - 0.500000000000002*G12_1_0_1 - 0.166666666666666*G12_1_1_0 - 0.166666666666666*G12_1_2_1 + 0.666666666666668*G12_1_4_1 + 0.666666666666667*G12_1_5_0 - 0.5*G14_0_0_0 - 0.5*G14_0_0_1 - 0.166666666666668*G14_0_1_0 - 0.166666666666666*G14_0_2_1 + 0.666666666666668*G14_0_4_1 + 0.666666666666668*G14_0_5_0 - 0.5*G14_1_0_0 - 0.500000000000002*G14_1_0_1 - 0.166666666666666*G14_1_1_0 - 0.166666666666666*G14_1_2_1 + 0.666666666666668*G14_1_4_1 + 0.666666666666667*G14_1_5_0 + 0.0166666666666667*G16_0 - 0.00277777777777778*G16_1 - 0.00277777777777778*G16_2 - 0.0111111111111111*G16_3 - 0.0166666666666667*G17_0 + 0.00277777777777778*G17_1 + 0.00277777777777778*G17_2 + 0.0111111111111111*G17_3;
    A[1] = 0.166666666666667*G0_1_0 - 0.00178571428571428*G4_0_0_0 - 0.00178571428571429*G4_0_0_1 + 0.00178571428571428*G4_0_1_0 - 0.00218253968253968*G4_0_2_1 - 0.000793650793650795*G4_0_3_0 + 0.00317460317460316*G4_0_3_1 + 0.000793650793650795*G4_0_4_0 + 0.00396825396825398*G4_0_4_1 - 0.00317460317460317*G4_0_5_1 - 0.00357142857142858*G4_1_0_0 - 0.00357142857142852*G4_1_0_1 - 0.0154761904761905*G4_1_1_0 + 0.00357142857142856*G4_1_2_1 - 0.00476190476190475*G4_1_3_0 - 0.0238095238095237*G4_1_3_1 + 0.00476190476190475*G4_1_4_0 + 0.019047619047619*G4_1_5_0 + 0.0238095238095238*G4_1_5_1 + 0.00218253968253968*G4_2_0_0 + 0.00218253968253967*G4_2_0_1 + 0.00178571428571428*G4_2_1_0 + 0.00178571428571429*G4_2_2_1 + 0.00317460317460317*G4_2_3_0 + 0.00317460317460315*G4_2_3_1 - 0.00317460317460317*G4_2_4_0 - 0.00396825396825395*G4_2_4_1 - 0.00396825396825397*G4_2_5_0 - 0.00317460317460317*G4_2_5_1 - 0.00317460317460318*G4_3_0_0 - 0.00317460317460317*G4_3_0_1 - 0.00952380952380953*G4_3_1_0 + 0.00634920634920636*G4_3_2_1 + 0.00634920634920635*G4_3_3_0 - 0.00952380952380951*G4_3_3_1 - 0.00634920634920635*G4_3_4_0 - 0.00317460317460319*G4_3_4_1 + 0.0126984126984127*G4_3_5_0 + 0.00952380952380953*G4_3_5_1 - 0.00396825396825397*G4_4_0_0 - 0.003968253968254*G4_4_0_1 - 0.00238095238095238*G4_4_1_0 + 0.00396825396825398*G4_4_2_1 + 0.00952380952380951*G4_4_3_0 + 0.00317460317460311*G4_4_3_1 - 0.00952380952380951*G4_4_4_0 + 0.00634920634920635*G4_4_5_0 - 0.00317460317460318*G4_4_5_1 - 0.00634920634920636*G4_5_0_0 - 0.00634920634920634*G4_5_0_1 - 0.00952380952380953*G4_5_1_0 + 0.00317460317460318*G4_5_2_1 + 0.00317460317460317*G4_5_3_0 - 0.00952380952380952*G4_5_3_1 - 0.00317460317460317*G4_5_4_0 + 0.00317460317460315*G4_5_4_1 + 0.0158730158730159*G4_5_5_0 + 0.00952380952380954*G4_5_5_1 - 0.00178571428571428*G5_0_6_0 - 0.00178571428571429*G5_0_6_1 + 0.00178571428571428*G5_0_7_0 - 0.00218253968253968*G5_0_8_1 - 0.000793650793650795*G5_0_9_0 + 0.00317460317460316*G5_0_9_1 + 0.000793650793650795*G5_0_10_0 + 0.00396825396825398*G5_0_10_1 - 0.00317460317460317*G5_0_11_1 - 0.00357142857142858*G5_1_6_0 - 0.00357142857142852*G5_1_6_1 - 0.0154761904761905*G5_1_7_0 + 0.00357142857142856*G5_1_8_1 - 0.00476190476190475*G5_1_9_0 - 0.0238095238095237*G5_1_9_1 + 0.00476190476190475*G5_1_10_0 + 0.019047619047619*G5_1_11_0 + 0.0238095238095238*G5_1_11_1 + 0.00218253968253968*G5_2_6_0 + 0.00218253968253967*G5_2_6_1 + 0.00178571428571428*G5_2_7_0 + 0.00178571428571429*G5_2_8_1 + 0.00317460317460317*G5_2_9_0 + 0.00317460317460315*G5_2_9_1 - 0.00317460317460317*G5_2_10_0 - 0.00396825396825395*G5_2_10_1 - 0.00396825396825397*G5_2_11_0 - 0.00317460317460317*G5_2_11_1 - 0.00317460317460318*G5_3_6_0 - 0.00317460317460317*G5_3_6_1 - 0.00952380952380953*G5_3_7_0 + 0.00634920634920636*G5_3_8_1 + 0.00634920634920635*G5_3_9_0 - 0.00952380952380951*G5_3_9_1 - 0.00634920634920635*G5_3_10_0 - 0.00317460317460319*G5_3_10_1 + 0.0126984126984127*G5_3_11_0 + 0.00952380952380953*G5_3_11_1 - 0.00396825396825397*G5_4_6_0 - 0.003968253968254*G5_4_6_1 - 0.00238095238095238*G5_4_7_0 + 0.00396825396825398*G5_4_8_1 + 0.00952380952380951*G5_4_9_0 + 0.00317460317460311*G5_4_9_1 - 0.00952380952380951*G5_4_10_0 + 0.00634920634920635*G5_4_11_0 - 0.00317460317460318*G5_4_11_1 - 0.00634920634920636*G5_5_6_0 - 0.00634920634920634*G5_5_6_1 - 0.00952380952380953*G5_5_7_0 + 0.00317460317460318*G5_5_8_1 + 0.00317460317460317*G5_5_9_0 - 0.00952380952380952*G5_5_9_1 - 0.00317460317460317*G5_5_10_0 + 0.00317460317460315*G5_5_10_1 + 0.0158730158730159*G5_5_11_0 + 0.00952380952380954*G5_5_11_1 - 0.00357142857142857*G8_0_0_0 - 0.00357142857142859*G8_0_0_1 + 0.00357142857142857*G8_0_1_0 - 0.00436507936507937*G8_0_2_1 - 0.00158730158730159*G8_0_3_0 + 0.00634920634920631*G8_0_3_1 + 0.00158730158730159*G8_0_4_0 + 0.00793650793650797*G8_0_4_1 - 0.00634920634920635*G8_0_5_1 - 0.00714285714285717*G8_1_0_0 - 0.00714285714285704*G8_1_0_1 - 0.0309523809523809*G8_1_1_0 + 0.00714285714285713*G8_1_2_1 - 0.0095238095238095*G8_1_3_0 - 0.0476190476190473*G8_1_3_1 + 0.0095238095238095*G8_1_4_0 + 0.0380952380952381*G8_1_5_0 + 0.0476190476190476*G8_1_5_1 + 0.00436507936507936*G8_2_0_0 + 0.00436507936507934*G8_2_0_1 + 0.00357142857142857*G8_2_1_0 + 0.00357142857142858*G8_2_2_1 + 0.00634920634920633*G8_2_3_0 + 0.0063492063492063*G8_2_3_1 - 0.00634920634920633*G8_2_4_0 - 0.00793650793650789*G8_2_4_1 - 0.00793650793650793*G8_2_5_0 - 0.00634920634920634*G8_2_5_1 - 0.00634920634920636*G8_3_0_0 - 0.00634920634920634*G8_3_0_1 - 0.0190476190476191*G8_3_1_0 + 0.0126984126984127*G8_3_2_1 + 0.0126984126984127*G8_3_3_0 - 0.019047619047619*G8_3_3_1 - 0.0126984126984127*G8_3_4_0 - 0.00634920634920639*G8_3_4_1 + 0.0253968253968254*G8_3_5_0 + 0.0190476190476191*G8_3_5_1 - 0.00793650793650794*G8_4_0_0 - 0.00793650793650799*G8_4_0_1 - 0.00476190476190477*G8_4_1_0 + 0.00793650793650796*G8_4_2_1 + 0.019047619047619*G8_4_3_0 + 0.00634920634920622*G8_4_3_1 - 0.019047619047619*G8_4_4_0 + 0.0126984126984127*G8_4_5_0 - 0.00634920634920636*G8_4_5_1 - 0.0126984126984127*G8_5_0_0 - 0.0126984126984127*G8_5_0_1 - 0.0190476190476191*G8_5_1_0 + 0.00634920634920637*G8_5_2_1 + 0.00634920634920635*G8_5_3_0 - 0.019047619047619*G8_5_3_1 - 0.00634920634920635*G8_5_4_0 + 0.0063492063492063*G8_5_4_1 + 0.0317460317460318*G8_5_5_0 + 0.0190476190476191*G8_5_5_1 - 0.00357142857142857*G9_0_0_6 - 0.00714285714285717*G9_0_0_7 + 0.00436507936507936*G9_0_0_8 - 0.00634920634920636*G9_0_0_9 - 0.00793650793650794*G9_0_0_10 - 0.0126984126984127*G9_0_0_11 - 0.00357142857142859*G9_0_1_6 - 0.00714285714285704*G9_0_1_7 + 0.00436507936507934*G9_0_1_8 - 0.00634920634920634*G9_0_1_9 - 0.00793650793650799*G9_0_1_10 - 0.0126984126984127*G9_0_1_11 + 0.00357142857142857*G9_1_0_6 - 0.0309523809523809*G9_1_0_7 + 0.00357142857142857*G9_1_0_8 - 0.0190476190476191*G9_1_0_9 - 0.00476190476190477*G9_1_0_10 - 0.0190476190476191*G9_1_0_11 - 0.00436507936507937*G9_2_1_6 + 0.00714285714285713*G9_2_1_7 + 0.00357142857142857*G9_2_1_8 + 0.0126984126984127*G9_2_1_9 + 0.00793650793650796*G9_2_1_10 + 0.00634920634920637*G9_2_1_11 - 0.00158730158730159*G9_3_0_6 - 0.0095238095238095*G9_3_0_7 + 0.00634920634920633*G9_3_0_8 + 0.0126984126984127*G9_3_0_9 + 0.019047619047619*G9_3_0_10 + 0.00634920634920635*G9_3_0_11 + 0.00634920634920631*G9_3_1_6 - 0.0476190476190473*G9_3_1_7 + 0.0063492063492063*G9_3_1_8 - 0.019047619047619*G9_3_1_9 + 0.00634920634920622*G9_3_1_10 - 0.019047619047619*G9_3_1_11 + 0.00158730158730159*G9_4_0_6 + 0.0095238095238095*G9_4_0_7 - 0.00634920634920633*G9_4_0_8 - 0.0126984126984127*G9_4_0_9 - 0.019047619047619*G9_4_0_10 - 0.00634920634920635*G9_4_0_11 + 0.00793650793650797*G9_4_1_6 - 0.00793650793650789*G9_4_1_8 - 0.00634920634920639*G9_4_1_9 + 0.0063492063492063*G9_4_1_11 + 0.0380952380952381*G9_5_0_7 - 0.00793650793650793*G9_5_0_8 + 0.0253968253968254*G9_5_0_9 + 0.0126984126984127*G9_5_0_10 + 0.0317460317460318*G9_5_0_11 - 0.00634920634920635*G9_5_1_6 + 0.0476190476190476*G9_5_1_7 - 0.00634920634920635*G9_5_1_8 + 0.0190476190476191*G9_5_1_9 - 0.00634920634920636*G9_5_1_10 + 0.0190476190476191*G9_5_1_11 - 0.166666666666668*G12_0_0_0 - 0.166666666666666*G12_0_0_1 - 0.5*G12_0_1_0 + 0.166666666666667*G12_0_2_1 - 0.666666666666664*G12_0_3_1 + 0.666666666666668*G12_0_5_0 + 0.666666666666667*G12_0_5_1 - 0.166666666666668*G14_0_0_0 - 0.166666666666666*G14_0_0_1 - 0.5*G14_0_1_0 + 0.166666666666667*G14_0_2_1 - 0.666666666666664*G14_0_3_1 + 0.666666666666668*G14_0_5_0 + 0.666666666666667*G14_0_5_1 - 0.00277777777777778*G16_0 + 0.0166666666666667*G16_1 - 0.00277777777777778*G16_2 - 0.0111111111111111*G16_4 + 0.00277777777777778*G17_0 - 0.0166666666666667*G17_1 + 0.00277777777777778*G17_2 + 0.0111111111111111*G17_4;
    A[2] = 0.166666666666667*G0_2_1 - 0.00178571428571429*G4_0_0_0 - 0.00178571428571429*G4_0_0_1 - 0.00218253968253969*G4_0_1_0 + 0.00178571428571429*G4_0_2_1 + 0.00317460317460317*G4_0_3_0 - 0.000793650793650811*G4_0_3_1 - 0.00317460317460317*G4_0_4_0 + 0.00396825396825397*G4_0_5_0 + 0.000793650793650795*G4_0_5_1 + 0.00218253968253968*G4_1_0_0 + 0.00218253968253967*G4_1_0_1 + 0.00178571428571428*G4_1_1_0 + 0.00178571428571429*G4_1_2_1 + 0.00317460317460317*G4_1_3_0 + 0.00317460317460315*G4_1_3_1 - 0.00317460317460317*G4_1_4_0 - 0.00396825396825395*G4_1_4_1 - 0.00396825396825397*G4_1_5_0 - 0.00317460317460317*G4_1_5_1 - 0.00357142857142856*G4_2_0_0 - 0.00357142857142852*G4_2_0_1 + 0.00357142857142857*G4_2_1_0 - 0.0154761904761905*G4_2_2_1 - 0.0238095238095238*G4_2_3_0 - 0.00476190476190463*G4_2_3_1 + 0.0238095238095238*G4_2_4_0 + 0.0190476190476189*G4_2_4_1 + 0.00476190476190476*G4_2_5_1 - 0.00317460317460316*G4_3_0_0 - 0.00317460317460317*G4_3_0_1 + 0.00634920634920635*G4_3_1_0 - 0.00952380952380952*G4_3_2_1 - 0.0095238095238095*G4_3_3_0 + 0.00634920634920636*G4_3_3_1 + 0.0095238095238095*G4_3_4_0 + 0.0126984126984127*G4_3_4_1 - 0.00317460317460319*G4_3_5_0 - 0.00634920634920635*G4_3_5_1 - 0.00634920634920634*G4_4_0_0 - 0.00634920634920634*G4_4_0_1 + 0.00317460317460317*G4_4_1_0 - 0.00952380952380953*G4_4_2_1 - 0.00952380952380951*G4_4_3_0 + 0.00317460317460319*G4_4_3_1 + 0.00952380952380951*G4_4_4_0 + 0.0158730158730159*G4_4_4_1 + 0.00317460317460317*G4_4_5_0 - 0.00317460317460318*G4_4_5_1 - 0.00396825396825396*G4_5_0_0 - 0.003968253968254*G4_5_0_1 + 0.00396825396825396*G4_5_1_0 - 0.00238095238095238*G4_5_2_1 + 0.00317460317460316*G4_5_3_0 + 0.00952380952380946*G4_5_3_1 - 0.00317460317460316*G4_5_4_0 + 0.00634920634920641*G4_5_4_1 - 0.00952380952380953*G4_5_5_1 - 0.00178571428571429*G5_0_6_0 - 0.00178571428571429*G5_0_6_1 - 0.00218253968253969*G5_0_7_0 + 0.00178571428571429*G5_0_8_1 + 0.00317460317460317*G5_0_9_0 - 0.000793650793650811*G5_0_9_1 - 0.00317460317460317*G5_0_10_0 + 0.00396825396825397*G5_0_11_0 + 0.000793650793650795*G5_0_11_1 + 0.00218253968253968*G5_1_6_0 + 0.00218253968253967*G5_1_6_1 + 0.00178571428571428*G5_1_7_0 + 0.00178571428571429*G5_1_8_1 + 0.00317460317460317*G5_1_9_0 + 0.00317460317460315*G5_1_9_1 - 0.00317460317460317*G5_1_10_0 - 0.00396825396825395*G5_1_10_1 - 0.00396825396825397*G5_1_11_0 - 0.00317460317460317*G5_1_11_1 - 0.00357142857142856*G5_2_6_0 - 0.00357142857142852*G5_2_6_1 + 0.00357142857142857*G5_2_7_0 - 0.0154761904761905*G5_2_8_1 - 0.0238095238095238*G5_2_9_0 - 0.00476190476190463*G5_2_9_1 + 0.0238095238095238*G5_2_10_0 + 0.0190476190476189*G5_2_10_1 + 0.00476190476190476*G5_2_11_1 - 0.00317460317460316*G5_3_6_0 - 0.00317460317460317*G5_3_6_1 + 0.00634920634920635*G5_3_7_0 - 0.00952380952380952*G5_3_8_1 - 0.0095238095238095*G5_3_9_0 + 0.00634920634920636*G5_3_9_1 + 0.0095238095238095*G5_3_10_0 + 0.0126984126984127*G5_3_10_1 - 0.00317460317460319*G5_3_11_0 - 0.00634920634920635*G5_3_11_1 - 0.00634920634920634*G5_4_6_0 - 0.00634920634920634*G5_4_6_1 + 0.00317460317460317*G5_4_7_0 - 0.00952380952380953*G5_4_8_1 - 0.00952380952380951*G5_4_9_0 + 0.00317460317460319*G5_4_9_1 + 0.00952380952380951*G5_4_10_0 + 0.0158730158730159*G5_4_10_1 + 0.00317460317460317*G5_4_11_0 - 0.00317460317460318*G5_4_11_1 - 0.00396825396825396*G5_5_6_0 - 0.003968253968254*G5_5_6_1 + 0.00396825396825396*G5_5_7_0 - 0.00238095238095238*G5_5_8_1 + 0.00317460317460316*G5_5_9_0 + 0.00952380952380946*G5_5_9_1 - 0.00317460317460316*G5_5_10_0 + 0.00634920634920641*G5_5_10_1 - 0.00952380952380953*G5_5_11_1 - 0.00357142857142858*G8_0_0_0 - 0.00357142857142859*G8_0_0_1 - 0.00436507936507937*G8_0_1_0 + 0.00357142857142858*G8_0_2_1 + 0.00634920634920634*G8_0_3_0 - 0.00158730158730162*G8_0_3_1 - 0.00634920634920634*G8_0_4_0 + 0.00793650793650795*G8_0_5_0 + 0.00158730158730159*G8_0_5_1 + 0.00436507936507936*G8_1_0_0 + 0.00436507936507934*G8_1_0_1 + 0.00357142857142857*G8_1_1_0 + 0.00357142857142857*G8_1_2_1 + 0.00634920634920634*G8_1_3_0 + 0.0063492063492063*G8_1_3_1 - 0.00634920634920634*G8_1_4_0 - 0.00793650793650789*G8_1_4_1 - 0.00793650793650793*G8_1_5_0 - 0.00634920634920635*G8_1_5_1 - 0.00714285714285712*G8_2_0_0 - 0.00714285714285703*G8_2_0_1 + 0.00714285714285715*G8_2_1_0 - 0.030952380952381*G8_2_2_1 - 0.0476190476190475*G8_2_3_0 - 0.00952380952380926*G8_2_3_1 + 0.0476190476190475*G8_2_4_0 + 0.0380952380952379*G8_2_4_1 + 0.00952380952380951*G8_2_5_1 - 0.00634920634920632*G8_3_0_0 - 0.00634920634920633*G8_3_0_1 + 0.0126984126984127*G8_3_1_0 - 0.019047619047619*G8_3_2_1 - 0.019047619047619*G8_3_3_0 + 0.0126984126984127*G8_3_3_1 + 0.019047619047619*G8_3_4_0 + 0.0253968253968254*G8_3_4_1 - 0.00634920634920638*G8_3_5_0 - 0.0126984126984127*G8_3_5_1 - 0.0126984126984127*G8_4_0_0 - 0.0126984126984127*G8_4_0_1 + 0.00634920634920634*G8_4_1_0 - 0.0190476190476191*G8_4_2_1 - 0.019047619047619*G8_4_3_0 + 0.00634920634920638*G8_4_3_1 + 0.019047619047619*G8_4_4_0 + 0.0317460317460317*G8_4_4_1 + 0.00634920634920633*G8_4_5_0 - 0.00634920634920635*G8_4_5_1 - 0.00793650793650792*G8_5_0_0 - 0.00793650793650799*G8_5_0_1 + 0.00793650793650793*G8_5_1_0 - 0.00476190476190476*G8_5_2_1 + 0.00634920634920632*G8_5_3_0 + 0.0190476190476189*G8_5_3_1 - 0.00634920634920632*G8_5_4_0 + 0.0126984126984128*G8_5_4_1 - 0.0190476190476191*G8_5_5_1 - 0.00357142857142858*G9_0_0_6 + 0.00436507936507936*G9_0_0_7 - 0.00714285714285712*G9_0_0_8 - 0.00634920634920632*G9_0_0_9 - 0.0126984126984127*G9_0_0_10 - 0.00793650793650793*G9_0_0_11 - 0.00357142857142859*G9_0_1_6 + 0.00436507936507934*G9_0_1_7 - 0.00714285714285703*G9_0_1_8 - 0.00634920634920633*G9_0_1_9 - 0.0126984126984127*G9_0_1_10 - 0.00793650793650799*G9_0_1_11 - 0.00436507936507937*G9_1_0_6 + 0.00357142857142857*G9_1_0_7 + 0.00714285714285715*G9_1_0_8 + 0.0126984126984127*G9_1_0_9 + 0.00634920634920634*G9_1_0_10 + 0.00793650793650793*G9_1_0_11 + 0.00357142857142858*G9_2_1_6 + 0.00357142857142857*G9_2_1_7 - 0.030952380952381*G9_2_1_8 - 0.019047619047619*G9_2_1_9 - 0.0190476190476191*G9_2_1_10 - 0.00476190476190476*G9_2_1_11 + 0.00634920634920634*G9_3_0_6 + 0.00634920634920633*G9_3_0_7 - 0.0476190476190475*G9_3_0_8 - 0.019047619047619*G9_3_0_9 - 0.019047619047619*G9_3_0_10 + 0.00634920634920632*G9_3_0_11 - 0.00158730158730162*G9_3_1_6 + 0.0063492063492063*G9_3_1_7 - 0.00952380952380926*G9_3_1_8 + 0.0126984126984127*G9_3_1_9 + 0.00634920634920638*G9_3_1_10 + 0.0190476190476189*G9_3_1_11 - 0.00634920634920634*G9_4_0_6 - 0.00634920634920633*G9_4_0_7 + 0.0476190476190475*G9_4_0_8 + 0.019047619047619*G9_4_0_9 + 0.019047619047619*G9_4_0_10 - 0.00634920634920632*G9_4_0_11 - 0.00793650793650789*G9_4_1_7 + 0.0380952380952379*G9_4_1_8 + 0.0253968253968254*G9_4_1_9 + 0.0317460317460317*G9_4_1_10 + 0.0126984126984128*G9_4_1_11 + 0.00793650793650795*G9_5_0_6 - 0.00793650793650793*G9_5_0_7 - 0.00634920634920638*G9_5_0_9 + 0.00634920634920633*G9_5_0_10 + 0.00158730158730159*G9_5_1_6 - 0.00634920634920634*G9_5_1_7 + 0.00952380952380951*G9_5_1_8 - 0.0126984126984127*G9_5_1_9 - 0.00634920634920635*G9_5_1_10 - 0.0190476190476191*G9_5_1_11 - 0.166666666666666*G12_1_0_0 - 0.166666666666666*G12_1_0_1 + 0.166666666666667*G12_1_1_0 - 0.5*G12_1_2_1 - 0.666666666666667*G12_1_3_0 + 0.666666666666667*G12_1_4_0 + 0.666666666666665*G12_1_4_1 - 0.166666666666666*G14_1_0_0 - 0.166666666666666*G14_1_0_1 + 0.166666666666667*G14_1_1_0 - 0.5*G14_1_2_1 - 0.666666666666667*G14_1_3_0 + 0.666666666666667*G14_1_4_0 + 0.666666666666665*G14_1_4_1 - 0.00277777777777778*G16_0 - 0.00277777777777778*G16_1 + 0.0166666666666666*G16_2 - 0.0111111111111111*G16_5 + 0.00277777777777778*G17_0 + 0.00277777777777778*G17_1 - 0.0166666666666666*G17_2 + 0.0111111111111111*G17_5;
    A[3] = 0.166666666666666*G0_0_0 + 0.166666666666665*G0_0_1 + 0.166666666666666*G0_1_0 + 0.333333333333331*G0_1_1 + 0.333333333333333*G0_2_0 + 0.166666666666664*G0_2_1 + 0.00238095238095238*G4_0_0_0 + 0.00238095238095235*G4_0_0_1 + 0.00396825396825397*G4_0_1_0 + 0.00396825396825398*G4_0_2_1 + 0.00952380952380951*G4_0_3_0 + 0.00952380952380944*G4_0_3_1 - 0.00952380952380951*G4_0_4_0 - 0.00634920634920629*G4_0_4_1 - 0.00634920634920635*G4_0_5_0 - 0.00952380952380953*G4_0_5_1 - 0.00317460317460318*G4_1_0_0 - 0.00317460317460317*G4_1_0_1 - 0.00952380952380953*G4_1_1_0 + 0.00634920634920636*G4_1_2_1 + 0.00634920634920634*G4_1_3_0 - 0.00952380952380952*G4_1_3_1 - 0.00634920634920634*G4_1_4_0 - 0.00317460317460319*G4_1_4_1 + 0.0126984126984127*G4_1_5_0 + 0.00952380952380953*G4_1_5_1 - 0.00317460317460316*G4_2_0_0 - 0.00317460317460317*G4_2_0_1 + 0.00634920634920635*G4_2_1_0 - 0.00952380952380952*G4_2_2_1 - 0.0095238095238095*G4_2_3_0 + 0.00634920634920636*G4_2_3_1 + 0.0095238095238095*G4_2_4_0 + 0.0126984126984127*G4_2_4_1 - 0.00317460317460319*G4_2_5_0 - 0.00634920634920635*G4_2_5_1 - 0.0190476190476191*G4_3_0_0 - 0.0190476190476188*G4_3_0_1 - 0.0317460317460317*G4_3_1_0 - 0.0317460317460318*G4_3_2_1 - 0.076190476190476*G4_3_3_0 - 0.0761904761904755*G4_3_3_1 + 0.076190476190476*G4_3_4_0 + 0.0507936507936503*G4_3_4_1 + 0.0507936507936508*G4_3_5_0 + 0.0761904761904762*G4_3_5_1 + 0.00317460317460316*G4_4_0_0 + 0.00317460317460329*G4_4_0_1 - 0.00317460317460316*G4_4_1_0 - 0.0158730158730159*G4_4_2_1 - 0.038095238095238*G4_4_3_0 - 0.0253968253968251*G4_4_3_1 + 0.038095238095238*G4_4_4_0 + 0.0126984126984125*G4_4_4_1 + 0.0253968253968254*G4_4_5_1 + 0.00317460317460315*G4_5_0_0 + 0.00317460317460328*G4_5_0_1 - 0.0158730158730159*G4_5_1_0 - 0.00317460317460321*G4_5_2_1 - 0.0253968253968254*G4_5_3_0 - 0.0380952380952378*G4_5_3_1 + 0.0253968253968254*G4_5_4_0 + 0.0126984126984127*G4_5_5_0 + 0.0380952380952381*G4_5_5_1 + 0.00238095238095238*G5_0_6_0 + 0.00238095238095235*G5_0_6_1 + 0.00396825396825397*G5_0_7_0 + 0.00396825396825398*G5_0_8_1 + 0.00952380952380951*G5_0_9_0 + 0.00952380952380944*G5_0_9_1 - 0.00952380952380951*G5_0_10_0 - 0.00634920634920629*G5_0_10_1 - 0.00634920634920635*G5_0_11_0 - 0.00952380952380953*G5_0_11_1 - 0.00317460317460318*G5_1_6_0 - 0.00317460317460317*G5_1_6_1 - 0.00952380952380953*G5_1_7_0 + 0.00634920634920636*G5_1_8_1 + 0.00634920634920634*G5_1_9_0 - 0.00952380952380952*G5_1_9_1 - 0.00634920634920634*G5_1_10_0 - 0.00317460317460319*G5_1_10_1 + 0.0126984126984127*G5_1_11_0 + 0.00952380952380953*G5_1_11_1 - 0.00317460317460316*G5_2_6_0 - 0.00317460317460317*G5_2_6_1 + 0.00634920634920635*G5_2_7_0 - 0.00952380952380952*G5_2_8_1 - 0.0095238095238095*G5_2_9_0 + 0.00634920634920636*G5_2_9_1 + 0.0095238095238095*G5_2_10_0 + 0.0126984126984127*G5_2_10_1 - 0.00317460317460319*G5_2_11_0 - 0.00634920634920635*G5_2_11_1 - 0.0190476190476191*G5_3_6_0 - 0.0190476190476188*G5_3_6_1 - 0.0317460317460317*G5_3_7_0 - 0.0317460317460318*G5_3_8_1 - 0.076190476190476*G5_3_9_0 - 0.0761904761904755*G5_3_9_1 + 0.076190476190476*G5_3_10_0 + 0.0507936507936503*G5_3_10_1 + 0.0507936507936508*G5_3_11_0 + 0.0761904761904762*G5_3_11_1 + 0.00317460317460316*G5_4_6_0 + 0.00317460317460329*G5_4_6_1 - 0.00317460317460316*G5_4_7_0 - 0.0158730158730159*G5_4_8_1 - 0.038095238095238*G5_4_9_0 - 0.0253968253968251*G5_4_9_1 + 0.038095238095238*G5_4_10_0 + 0.0126984126984125*G5_4_10_1 + 0.0253968253968254*G5_4_11_1 + 0.00317460317460315*G5_5_6_0 + 0.00317460317460328*G5_5_6_1 - 0.0158730158730159*G5_5_7_0 - 0.00317460317460321*G5_5_8_1 - 0.0253968253968254*G5_5_9_0 - 0.0380952380952378*G5_5_9_1 + 0.0253968253968254*G5_5_10_0 + 0.0126984126984127*G5_5_11_0 + 0.0380952380952381*G5_5_11_1 + 0.00476190476190477*G8_0_0_0 + 0.0047619047619047*G8_0_0_1 + 0.00793650793650794*G8_0_1_0 + 0.00793650793650796*G8_0_2_1 + 0.019047619047619*G8_0_3_0 + 0.0190476190476189*G8_0_3_1 - 0.019047619047619*G8_0_4_0 - 0.0126984126984126*G8_0_4_1 - 0.0126984126984127*G8_0_5_0 - 0.0190476190476191*G8_0_5_1 - 0.00634920634920636*G8_1_0_0 - 0.00634920634920635*G8_1_0_1 - 0.0190476190476191*G8_1_1_0 + 0.0126984126984127*G8_1_2_1 + 0.0126984126984127*G8_1_3_0 - 0.019047619047619*G8_1_3_1 - 0.0126984126984127*G8_1_4_0 - 0.00634920634920639*G8_1_4_1 + 0.0253968253968254*G8_1_5_0 + 0.0190476190476191*G8_1_5_1 - 0.00634920634920632*G8_2_0_0 - 0.00634920634920633*G8_2_0_1 + 0.0126984126984127*G8_2_1_0 - 0.019047619047619*G8_2_2_1 - 0.019047619047619*G8_2_3_0 + 0.0126984126984127*G8_2_3_1 + 0.019047619047619*G8_2_4_0 + 0.0253968253968254*G8_2_4_1 - 0.00634920634920638*G8_2_5_0 - 0.0126984126984127*G8_2_5_1 - 0.0380952380952381*G8_3_0_0 - 0.0380952380952375*G8_3_0_1 - 0.0634920634920635*G8_3_1_0 - 0.0634920634920636*G8_3_2_1 - 0.152380952380952*G8_3_3_0 - 0.152380952380951*G8_3_3_1 + 0.152380952380952*G8_3_4_0 + 0.101587301587301*G8_3_4_1 + 0.101587301587302*G8_3_5_0 + 0.152380952380952*G8_3_5_1 + 0.00634920634920632*G8_4_0_0 + 0.00634920634920658*G8_4_0_1 - 0.00634920634920632*G8_4_1_0 - 0.0317460317460318*G8_4_2_1 - 0.0761904761904761*G8_4_3_0 - 0.0507936507936502*G8_4_3_1 + 0.0761904761904761*G8_4_4_0 + 0.025396825396825*G8_4_4_1 + 0.0507936507936508*G8_4_5_1 + 0.00634920634920629*G8_5_0_0 + 0.00634920634920657*G8_5_0_1 - 0.0317460317460317*G8_5_1_0 - 0.00634920634920642*G8_5_2_1 - 0.0507936507936507*G8_5_3_0 - 0.0761904761904756*G8_5_3_1 + 0.0507936507936507*G8_5_4_0 + 0.0253968253968254*G8_5_5_0 + 0.0761904761904763*G8_5_5_1 + 0.00476190476190477*G9_0_0_6 - 0.00634920634920636*G9_0_0_7 - 0.00634920634920632*G9_0_0_8 - 0.0380952380952381*G9_0_0_9 + 0.00634920634920633*G9_0_0_10 + 0.00634920634920629*G9_0_0_11 + 0.0047619047619047*G9_0_1_6 - 0.00634920634920634*G9_0_1_7 - 0.00634920634920633*G9_0_1_8 - 0.0380952380952375*G9_0_1_9 + 0.00634920634920658*G9_0_1_10 + 0.00634920634920657*G9_0_1_11 + 0.00793650793650794*G9_1_0_6 - 0.0190476190476191*G9_1_0_7 + 0.0126984126984127*G9_1_0_8 - 0.0634920634920635*G9_1_0_9 - 0.00634920634920632*G9_1_0_10 - 0.0317460317460317*G9_1_0_11 + 0.00793650793650796*G9_2_1_6 + 0.0126984126984127*G9_2_1_7 - 0.019047619047619*G9_2_1_8 - 0.0634920634920636*G9_2_1_9 - 0.0317460317460318*G9_2_1_10 - 0.00634920634920642*G9_2_1_11 + 0.019047619047619*G9_3_0_6 + 0.0126984126984127*G9_3_0_7 - 0.019047619047619*G9_3_0_8 - 0.152380952380952*G9_3_0_9 - 0.0761904761904761*G9_3_0_10 - 0.0507936507936507*G9_3_0_11 + 0.0190476190476189*G9_3_1_6 - 0.019047619047619*G9_3_1_7 + 0.0126984126984127*G9_3_1_8 - 0.152380952380951*G9_3_1_9 - 0.0507936507936502*G9_3_1_10 - 0.0761904761904756*G9_3_1_11 - 0.019047619047619*G9_4_0_6 - 0.0126984126984127*G9_4_0_7 + 0.019047619047619*G9_4_0_8 + 0.152380952380952*G9_4_0_9 + 0.0761904761904761*G9_4_0_10 + 0.0507936507936507*G9_4_0_11 - 0.0126984126984126*G9_4_1_6 - 0.00634920634920639*G9_4_1_7 + 0.0253968253968254*G9_4_1_8 + 0.101587301587301*G9_4_1_9 + 0.025396825396825*G9_4_1_10 - 0.0126984126984127*G9_5_0_6 + 0.0253968253968254*G9_5_0_7 - 0.00634920634920638*G9_5_0_8 + 0.101587301587302*G9_5_0_9 + 0.0253968253968254*G9_5_0_11 - 0.0190476190476191*G9_5_1_6 + 0.0190476190476191*G9_5_1_7 - 0.0126984126984127*G9_5_1_8 + 0.152380952380952*G9_5_1_9 + 0.0507936507936508*G9_5_1_10 + 0.0761904761904763*G9_5_1_11 - 0.666666666666667*G12_0_2_1 - 1.33333333333333*G12_0_3_0 - 0.666666666666656*G12_0_3_1 + 1.33333333333333*G12_0_4_0 + 0.666666666666659*G12_0_4_1 + 0.666666666666665*G12_0_5_1 - 0.666666666666664*G12_1_1_0 - 0.666666666666656*G12_1_3_0 - 1.33333333333332*G12_1_3_1 + 0.666666666666656*G12_1_4_0 + 0.666666666666666*G12_1_5_0 + 1.33333333333333*G12_1_5_1 - 0.666666666666667*G14_0_2_1 - 1.33333333333333*G14_0_3_0 - 0.666666666666656*G14_0_3_1 + 1.33333333333333*G14_0_4_0 + 0.666666666666659*G14_0_4_1 + 0.666666666666665*G14_0_5_1 - 0.666666666666664*G14_1_1_0 - 0.666666666666656*G14_1_3_0 - 1.33333333333332*G14_1_3_1 + 0.666666666666656*G14_1_4_0 + 0.666666666666666*G14_1_5_0 + 1.33333333333333*G14_1_5_1 - 0.0111111111111111*G16_0 + 0.0888888888888888*G16_3 + 0.0444444444444444*G16_4 + 0.0444444444444445*G16_5 + 0.0111111111111111*G17_0 - 0.0888888888888888*G17_3 - 0.0444444444444444*G17_4 - 0.0444444444444445*G17_5;
    A[4] = -0.166666666666666*G0_0_0 + 0.166666666666668*G0_0_1 - 0.166666666666666*G0_1_0 - 0.333333333333333*G0_2_0 - 0.166666666666665*G0_2_1 + 0.00952380952380953*G4_0_0_0 + 0.00952380952380953*G4_0_0_1 + 0.00317460317460318*G4_0_1_0 + 0.00634920634920636*G4_0_2_1 + 0.00634920634920634*G4_0_3_0 + 0.00317460317460316*G4_0_3_1 - 0.00634920634920634*G4_0_4_0 - 0.0158730158730159*G4_0_4_1 - 0.0126984126984127*G4_0_5_0 - 0.00317460317460318*G4_0_5_1 - 0.00396825396825397*G4_1_0_0 - 0.00396825396825399*G4_1_0_1 - 0.00238095238095238*G4_1_1_0 + 0.00396825396825398*G4_1_2_1 + 0.00952380952380951*G4_1_3_0 + 0.00317460317460311*G4_1_3_1 - 0.00952380952380951*G4_1_4_0 + 0.00634920634920635*G4_1_5_0 - 0.00317460317460318*G4_1_5_1 - 0.00634920634920634*G4_2_0_0 - 0.00634920634920634*G4_2_0_1 + 0.00317460317460317*G4_2_1_0 - 0.00952380952380953*G4_2_2_1 - 0.00952380952380951*G4_2_3_0 + 0.00317460317460319*G4_2_3_1 + 0.00952380952380951*G4_2_4_0 + 0.0158730158730159*G4_2_4_1 + 0.00317460317460317*G4_2_5_0 - 0.00317460317460318*G4_2_5_1 + 0.00317460317460316*G4_3_0_0 + 0.00317460317460329*G4_3_0_1 - 0.00317460317460316*G4_3_1_0 - 0.0158730158730159*G4_3_2_1 - 0.038095238095238*G4_3_3_0 - 0.0253968253968251*G4_3_3_1 + 0.038095238095238*G4_3_4_0 + 0.0126984126984125*G4_3_4_1 + 0.0253968253968254*G4_3_5_1 + 0.0317460317460317*G4_4_0_0 + 0.031746031746032*G4_4_0_1 + 0.0190476190476191*G4_4_1_0 - 0.0317460317460318*G4_4_2_1 - 0.0761904761904761*G4_4_3_0 - 0.0253968253968248*G4_4_3_1 + 0.0761904761904761*G4_4_4_0 - 0.0507936507936508*G4_4_5_0 + 0.0253968253968254*G4_4_5_1 + 0.0158730158730159*G4_5_0_0 + 0.015873015873016*G4_5_0_1 - 0.00317460317460315*G4_5_1_0 - 0.00317460317460321*G4_5_2_1 - 0.0253968253968254*G4_5_3_0 - 0.0253968253968251*G4_5_3_1 + 0.0253968253968254*G4_5_4_0 - 0.0126984126984129*G4_5_4_1 - 0.0126984126984127*G4_5_5_0 + 0.0253968253968254*G4_5_5_1 + 0.00952380952380953*G5_0_6_0 + 0.00952380952380953*G5_0_6_1 + 0.00317460317460318*G5_0_7_0 + 0.00634920634920636*G5_0_8_1 + 0.00634920634920634*G5_0_9_0 + 0.00317460317460316*G5_0_9_1 - 0.00634920634920634*G5_0_10_0 - 0.0158730158730159*G5_0_10_1 - 0.0126984126984127*G5_0_11_0 - 0.00317460317460318*G5_0_11_1 - 0.00396825396825397*G5_1_6_0 - 0.00396825396825399*G5_1_6_1 - 0.00238095238095238*G5_1_7_0 + 0.00396825396825398*G5_1_8_1 + 0.00952380952380951*G5_1_9_0 + 0.00317460317460311*G5_1_9_1 - 0.00952380952380951*G5_1_10_0 + 0.00634920634920635*G5_1_11_0 - 0.00317460317460318*G5_1_11_1 - 0.00634920634920634*G5_2_6_0 - 0.00634920634920634*G5_2_6_1 + 0.00317460317460317*G5_2_7_0 - 0.00952380952380953*G5_2_8_1 - 0.00952380952380951*G5_2_9_0 + 0.00317460317460319*G5_2_9_1 + 0.00952380952380951*G5_2_10_0 + 0.0158730158730159*G5_2_10_1 + 0.00317460317460317*G5_2_11_0 - 0.00317460317460318*G5_2_11_1 + 0.00317460317460316*G5_3_6_0 + 0.00317460317460329*G5_3_6_1 - 0.00317460317460316*G5_3_7_0 - 0.0158730158730159*G5_3_8_1 - 0.038095238095238*G5_3_9_0 - 0.0253968253968251*G5_3_9_1 + 0.038095238095238*G5_3_10_0 + 0.0126984126984125*G5_3_10_1 + 0.0253968253968254*G5_3_11_1 + 0.0317460317460317*G5_4_6_0 + 0.031746031746032*G5_4_6_1 + 0.0190476190476191*G5_4_7_0 - 0.0317460317460318*G5_4_8_1 - 0.0761904761904761*G5_4_9_0 - 0.0253968253968248*G5_4_9_1 + 0.0761904761904761*G5_4_10_0 - 0.0507936507936508*G5_4_11_0 + 0.0253968253968254*G5_4_11_1 + 0.0158730158730159*G5_5_6_0 + 0.015873015873016*G5_5_6_1 - 0.00317460317460315*G5_5_7_0 - 0.00317460317460321*G5_5_8_1 - 0.0253968253968254*G5_5_9_0 - 0.0253968253968251*G5_5_9_1 + 0.0253968253968254*G5_5_10_0 - 0.0126984126984129*G5_5_10_1 - 0.0126984126984127*G5_5_11_0 + 0.0253968253968254*G5_5_11_1 + 0.0190476190476191*G8_0_0_0 + 0.0190476190476191*G8_0_0_1 + 0.00634920634920637*G8_0_1_0 + 0.0126984126984127*G8_0_2_1 + 0.0126984126984127*G8_0_3_0 + 0.00634920634920632*G8_0_3_1 - 0.0126984126984127*G8_0_4_0 - 0.0317460317460317*G8_0_4_1 - 0.0253968253968254*G8_0_5_0 - 0.00634920634920635*G8_0_5_1 - 0.00793650793650794*G8_1_0_0 - 0.00793650793650799*G8_1_0_1 - 0.00476190476190477*G8_1_1_0 + 0.00793650793650796*G8_1_2_1 + 0.019047619047619*G8_1_3_0 + 0.00634920634920622*G8_1_3_1 - 0.019047619047619*G8_1_4_0 + 0.0126984126984127*G8_1_5_0 - 0.00634920634920636*G8_1_5_1 - 0.0126984126984127*G8_2_0_0 - 0.0126984126984127*G8_2_0_1 + 0.00634920634920634*G8_2_1_0 - 0.0190476190476191*G8_2_2_1 - 0.019047619047619*G8_2_3_0 + 0.00634920634920638*G8_2_3_1 + 0.019047619047619*G8_2_4_0 + 0.0317460317460317*G8_2_4_1 + 0.00634920634920633*G8_2_5_0 - 0.00634920634920635*G8_2_5_1 + 0.00634920634920633*G8_3_0_0 + 0.00634920634920658*G8_3_0_1 - 0.00634920634920632*G8_3_1_0 - 0.0317460317460318*G8_3_2_1 - 0.0761904761904761*G8_3_3_0 - 0.0507936507936502*G8_3_3_1 + 0.0761904761904761*G8_3_4_0 + 0.025396825396825*G8_3_4_1 + 0.0507936507936508*G8_3_5_1 + 0.0634920634920635*G8_4_0_0 + 0.0634920634920639*G8_4_0_1 + 0.0380952380952382*G8_4_1_0 - 0.0634920634920636*G8_4_2_1 - 0.152380952380952*G8_4_3_0 - 0.0507936507936497*G8_4_3_1 + 0.152380952380952*G8_4_4_0 - 0.101587301587302*G8_4_5_0 + 0.0507936507936508*G8_4_5_1 + 0.0317460317460317*G8_5_0_0 + 0.031746031746032*G8_5_0_1 - 0.00634920634920629*G8_5_1_0 - 0.00634920634920642*G8_5_2_1 - 0.0507936507936507*G8_5_3_0 - 0.0507936507936502*G8_5_3_1 + 0.0507936507936507*G8_5_4_0 - 0.0253968253968258*G8_5_4_1 - 0.0253968253968254*G8_5_5_0 + 0.0507936507936508*G8_5_5_1 + 0.0190476190476191*G9_0_0_6 - 0.00793650793650794*G9_0_0_7 - 0.0126984126984127*G9_0_0_8 + 0.00634920634920632*G9_0_0_9 + 0.0634920634920635*G9_0_0_10 + 0.0317460317460317*G9_0_0_11 + 0.0190476190476191*G9_0_1_6 - 0.00793650793650799*G9_0_1_7 - 0.0126984126984127*G9_0_1_8 + 0.00634920634920658*G9_0_1_9 + 0.0634920634920639*G9_0_1_10 + 0.031746031746032*G9_0_1_11 + 0.00634920634920637*G9_1_0_6 - 0.00476190476190477*G9_1_0_7 + 0.00634920634920634*G9_1_0_8 - 0.00634920634920632*G9_1_0_9 + 0.0380952380952382*G9_1_0_10 - 0.00634920634920629*G9_1_0_11 + 0.0126984126984127*G9_2_1_6 + 0.00793650793650796*G9_2_1_7 - 0.019047619047619*G9_2_1_8 - 0.0317460317460318*G9_2_1_9 - 0.0634920634920636*G9_2_1_10 - 0.00634920634920642*G9_2_1_11 + 0.0126984126984127*G9_3_0_6 + 0.019047619047619*G9_3_0_7 - 0.019047619047619*G9_3_0_8 - 0.0761904761904761*G9_3_0_9 - 0.152380952380952*G9_3_0_10 - 0.0507936507936507*G9_3_0_11 + 0.00634920634920632*G9_3_1_6 + 0.00634920634920622*G9_3_1_7 + 0.00634920634920638*G9_3_1_8 - 0.0507936507936502*G9_3_1_9 - 0.0507936507936497*G9_3_1_10 - 0.0507936507936502*G9_3_1_11 - 0.0126984126984127*G9_4_0_6 - 0.019047619047619*G9_4_0_7 + 0.019047619047619*G9_4_0_8 + 0.0761904761904761*G9_4_0_9 + 0.152380952380952*G9_4_0_10 + 0.0507936507936507*G9_4_0_11 - 0.0317460317460317*G9_4_1_6 + 0.0317460317460317*G9_4_1_8 + 0.025396825396825*G9_4_1_9 - 0.0253968253968258*G9_4_1_11 - 0.0253968253968254*G9_5_0_6 + 0.0126984126984127*G9_5_0_7 + 0.00634920634920633*G9_5_0_8 - 0.101587301587302*G9_5_0_10 - 0.0253968253968254*G9_5_0_11 - 0.00634920634920635*G9_5_1_6 - 0.00634920634920636*G9_5_1_7 - 0.00634920634920635*G9_5_1_8 + 0.0507936507936508*G9_5_1_9 + 0.0507936507936508*G9_5_1_10 + 0.0507936507936508*G9_5_1_11 + 0.666666666666667*G12_0_2_1 + 1.33333333333333*G12_0_3_0 + 0.666666666666656*G12_0_3_1 - 1.33333333333333*G12_0_4_0 - 0.666666666666659*G12_0_4_1 - 0.666666666666665*G12_0_5_1 + 0.666666666666668*G12_1_0_0 + 0.666666666666668*G12_1_0_1 + 0.666666666666665*G12_1_2_1 + 0.666666666666659*G12_1_3_0 - 0.666666666666659*G12_1_4_0 - 1.33333333333333*G12_1_4_1 - 0.666666666666666*G12_1_5_0 + 0.666666666666667*G14_0_2_1 + 1.33333333333333*G14_0_3_0 + 0.666666666666656*G14_0_3_1 - 1.33333333333333*G14_0_4_0 - 0.666666666666659*G14_0_4_1 - 0.666666666666665*G14_0_5_1 + 0.666666666666668*G14_1_0_0 + 0.666666666666668*G14_1_0_1 + 0.666666666666665*G14_1_2_1 + 0.666666666666659*G14_1_3_0 - 0.666666666666659*G14_1_4_0 - 1.33333333333333*G14_1_4_1 - 0.666666666666666*G14_1_5_0 - 0.0111111111111111*G16_1 + 0.0444444444444444*G16_3 + 0.0888888888888889*G16_4 + 0.0444444444444444*G16_5 + 0.0111111111111111*G17_1 - 0.0444444444444444*G17_3 - 0.0888888888888889*G17_4 - 0.0444444444444444*G17_5;
    A[5] = 0.166666666666667*G0_0_0 - 0.166666666666667*G0_0_1 - 0.166666666666667*G0_1_0 - 0.333333333333333*G0_1_1 - 0.166666666666667*G0_2_1 + 0.00952380952380953*G4_0_0_0 + 0.00952380952380952*G4_0_0_1 + 0.00634920634920636*G4_0_1_0 + 0.00317460317460318*G4_0_2_1 + 0.00317460317460318*G4_0_3_0 + 0.00634920634920634*G4_0_3_1 - 0.00317460317460318*G4_0_4_0 - 0.0126984126984127*G4_0_4_1 - 0.0158730158730159*G4_0_5_0 - 0.00634920634920636*G4_0_5_1 - 0.00634920634920636*G4_1_0_0 - 0.00634920634920634*G4_1_0_1 - 0.00952380952380953*G4_1_1_0 + 0.00317460317460318*G4_1_2_1 + 0.00317460317460317*G4_1_3_0 - 0.00952380952380952*G4_1_3_1 - 0.00317460317460317*G4_1_4_0 + 0.00317460317460315*G4_1_4_1 + 0.0158730158730159*G4_1_5_0 + 0.00952380952380954*G4_1_5_1 - 0.00396825396825396*G4_2_0_0 - 0.00396825396825399*G4_2_0_1 + 0.00396825396825396*G4_2_1_0 - 0.00238095238095238*G4_2_2_1 + 0.00317460317460316*G4_2_3_0 + 0.00952380952380946*G4_2_3_1 - 0.00317460317460316*G4_2_4_0 + 0.00634920634920641*G4_2_4_1 - 0.00952380952380953*G4_2_5_1 + 0.00317460317460315*G4_3_0_0 + 0.00317460317460328*G4_3_0_1 - 0.0158730158730159*G4_3_1_0 - 0.00317460317460321*G4_3_2_1 - 0.0253968253968254*G4_3_3_0 - 0.0380952380952378*G4_3_3_1 + 0.0253968253968254*G4_3_4_0 + 0.0126984126984127*G4_3_5_0 + 0.0380952380952381*G4_3_5_1 + 0.0158730158730159*G4_4_0_0 + 0.015873015873016*G4_4_0_1 - 0.00317460317460315*G4_4_1_0 - 0.00317460317460321*G4_4_2_1 - 0.0253968253968254*G4_4_3_0 - 0.0253968253968251*G4_4_3_1 + 0.0253968253968254*G4_4_4_0 - 0.0126984126984129*G4_4_4_1 - 0.0126984126984127*G4_4_5_0 + 0.0253968253968254*G4_4_5_1 + 0.0317460317460317*G4_5_0_0 + 0.031746031746032*G4_5_0_1 - 0.0317460317460317*G4_5_1_0 + 0.019047619047619*G4_5_2_1 - 0.0253968253968253*G4_5_3_0 - 0.0761904761904757*G4_5_3_1 + 0.0253968253968253*G4_5_4_0 - 0.0507936507936512*G4_5_4_1 + 0.0761904761904763*G4_5_5_1 + 0.00952380952380953*G5_0_6_0 + 0.00952380952380952*G5_0_6_1 + 0.00634920634920636*G5_0_7_0 + 0.00317460317460318*G5_0_8_1 + 0.00317460317460318*G5_0_9_0 + 0.00634920634920634*G5_0_9_1 - 0.00317460317460318*G5_0_10_0 - 0.0126984126984127*G5_0_10_1 - 0.0158730158730159*G5_0_11_0 - 0.00634920634920636*G5_0_11_1 - 0.00634920634920636*G5_1_6_0 - 0.00634920634920634*G5_1_6_1 - 0.00952380952380953*G5_1_7_0 + 0.00317460317460318*G5_1_8_1 + 0.00317460317460317*G5_1_9_0 - 0.00952380952380952*G5_1_9_1 - 0.00317460317460317*G5_1_10_0 + 0.00317460317460315*G5_1_10_1 + 0.0158730158730159*G5_1_11_0 + 0.00952380952380954*G5_1_11_1 - 0.00396825396825396*G5_2_6_0 - 0.00396825396825399*G5_2_6_1 + 0.00396825396825396*G5_2_7_0 - 0.00238095238095238*G5_2_8_1 + 0.00317460317460316*G5_2_9_0 + 0.00952380952380946*G5_2_9_1 - 0.00317460317460316*G5_2_10_0 + 0.00634920634920641*G5_2_10_1 - 0.00952380952380953*G5_2_11_1 + 0.00317460317460315*G5_3_6_0 + 0.00317460317460328*G5_3_6_1 - 0.0158730158730159*G5_3_7_0 - 0.00317460317460321*G5_3_8_1 - 0.0253968253968254*G5_3_9_0 - 0.0380952380952378*G5_3_9_1 + 0.0253968253968254*G5_3_10_0 + 0.0126984126984127*G5_3_11_0 + 0.0380952380952381*G5_3_11_1 + 0.0158730158730159*G5_4_6_0 + 0.015873015873016*G5_4_6_1 - 0.00317460317460315*G5_4_7_0 - 0.00317460317460321*G5_4_8_1 - 0.0253968253968254*G5_4_9_0 - 0.0253968253968251*G5_4_9_1 + 0.0253968253968254*G5_4_10_0 - 0.0126984126984129*G5_4_10_1 - 0.0126984126984127*G5_4_11_0 + 0.0253968253968254*G5_4_11_1 + 0.0317460317460317*G5_5_6_0 + 0.031746031746032*G5_5_6_1 - 0.0317460317460317*G5_5_7_0 + 0.019047619047619*G5_5_8_1 - 0.0253968253968253*G5_5_9_0 - 0.0761904761904757*G5_5_9_1 + 0.0253968253968253*G5_5_10_0 - 0.0507936507936512*G5_5_10_1 + 0.0761904761904763*G5_5_11_1 + 0.0190476190476191*G8_0_0_0 + 0.019047619047619*G8_0_0_1 + 0.0126984126984127*G8_0_1_0 + 0.00634920634920636*G8_0_2_1 + 0.00634920634920635*G8_0_3_0 + 0.0126984126984127*G8_0_3_1 - 0.00634920634920635*G8_0_4_0 - 0.0253968253968254*G8_0_4_1 - 0.0317460317460318*G8_0_5_0 - 0.0126984126984127*G8_0_5_1 - 0.0126984126984127*G8_1_0_0 - 0.0126984126984127*G8_1_0_1 - 0.0190476190476191*G8_1_1_0 + 0.00634920634920637*G8_1_2_1 + 0.00634920634920635*G8_1_3_0 - 0.019047619047619*G8_1_3_1 - 0.00634920634920635*G8_1_4_0 + 0.0063492063492063*G8_1_4_1 + 0.0317460317460318*G8_1_5_0 + 0.0190476190476191*G8_1_5_1 - 0.00793650793650792*G8_2_0_0 - 0.00793650793650799*G8_2_0_1 + 0.00793650793650793*G8_2_1_0 - 0.00476190476190476*G8_2_2_1 + 0.00634920634920632*G8_2_3_0 + 0.0190476190476189*G8_2_3_1 - 0.00634920634920632*G8_2_4_0 + 0.0126984126984128*G8_2_4_1 - 0.0190476190476191*G8_2_5_1 + 0.00634920634920629*G8_3_0_0 + 0.00634920634920657*G8_3_0_1 - 0.0317460317460317*G8_3_1_0 - 0.00634920634920642*G8_3_2_1 - 0.0507936507936507*G8_3_3_0 - 0.0761904761904757*G8_3_3_1 + 0.0507936507936507*G8_3_4_0 + 0.0253968253968254*G8_3_5_0 + 0.0761904761904763*G8_3_5_1 + 0.0317460317460317*G8_4_0_0 + 0.031746031746032*G8_4_0_1 - 0.00634920634920629*G8_4_1_0 - 0.00634920634920642*G8_4_2_1 - 0.0507936507936507*G8_4_3_0 - 0.0507936507936502*G8_4_3_1 + 0.0507936507936507*G8_4_4_0 - 0.0253968253968258*G8_4_4_1 - 0.0253968253968254*G8_4_5_0 + 0.0507936507936508*G8_4_5_1 + 0.0634920634920634*G8_5_0_0 + 0.0634920634920639*G8_5_0_1 - 0.0634920634920634*G8_5_1_0 + 0.038095238095238*G8_5_2_1 - 0.0507936507936506*G8_5_3_0 - 0.152380952380951*G8_5_3_1 + 0.0507936507936506*G8_5_4_0 - 0.101587301587302*G8_5_4_1 + 0.152380952380953*G8_5_5_1 + 0.0190476190476191*G9_0_0_6 - 0.0126984126984127*G9_0_0_7 - 0.00793650793650792*G9_0_0_8 + 0.00634920634920629*G9_0_0_9 + 0.0317460317460317*G9_0_0_10 + 0.0634920634920634*G9_0_0_11 + 0.019047619047619*G9_0_1_6 - 0.0126984126984127*G9_0_1_7 - 0.00793650793650799*G9_0_1_8 + 0.00634920634920657*G9_0_1_9 + 0.031746031746032*G9_0_1_10 + 0.0634920634920639*G9_0_1_11 + 0.0126984126984127*G9_1_0_6 - 0.0190476190476191*G9_1_0_7 + 0.00793650793650793*G9_1_0_8 - 0.0317460317460317*G9_1_0_9 - 0.00634920634920629*G9_1_0_10 - 0.0634920634920634*G9_1_0_11 + 0.00634920634920636*G9_2_1_6 + 0.00634920634920637*G9_2_1_7 - 0.00476190476190476*G9_2_1_8 - 0.00634920634920642*G9_2_1_9 - 0.00634920634920642*G9_2_1_10 + 0.038095238095238*G9_2_1_11 + 0.00634920634920635*G9_3_0_6 + 0.00634920634920635*G9_3_0_7 + 0.00634920634920632*G9_3_0_8 - 0.0507936507936507*G9_3_0_9 - 0.0507936507936507*G9_3_0_10 - 0.0507936507936506*G9_3_0_11 + 0.0126984126984127*G9_3_1_6 - 0.019047619047619*G9_3_1_7 + 0.0190476190476189*G9_3_1_8 - 0.0761904761904757*G9_3_1_9 - 0.0507936507936502*G9_3_1_10 - 0.152380952380951*G9_3_1_11 - 0.00634920634920635*G9_4_0_6 - 0.00634920634920635*G9_4_0_7 - 0.00634920634920632*G9_4_0_8 + 0.0507936507936507*G9_4_0_9 + 0.0507936507936507*G9_4_0_10 + 0.0507936507936506*G9_4_0_11 - 0.0253968253968254*G9_4_1_6 + 0.0063492063492063*G9_4_1_7 + 0.0126984126984128*G9_4_1_8 - 0.0253968253968258*G9_4_1_10 - 0.101587301587302*G9_4_1_11 - 0.0317460317460318*G9_5_0_6 + 0.0317460317460318*G9_5_0_7 + 0.0253968253968254*G9_5_0_9 - 0.0253968253968254*G9_5_0_10 - 0.0126984126984127*G9_5_1_6 + 0.0190476190476191*G9_5_1_7 - 0.0190476190476191*G9_5_1_8 + 0.0761904761904763*G9_5_1_9 + 0.0507936507936508*G9_5_1_10 + 0.152380952380953*G9_5_1_11 + 0.666666666666668*G12_0_0_0 + 0.666666666666667*G12_0_0_1 + 0.666666666666668*G12_0_1_0 + 0.666666666666666*G12_0_3_1 - 0.666666666666666*G12_0_4_1 - 1.33333333333334*G12_0_5_0 - 0.666666666666667*G12_0_5_1 + 0.666666666666667*G12_1_1_0 + 0.666666666666665*G12_1_3_0 + 1.33333333333333*G12_1_3_1 - 0.666666666666665*G12_1_4_0 - 0.666666666666667*G12_1_5_0 - 1.33333333333333*G12_1_5_1 + 0.666666666666668*G14_0_0_0 + 0.666666666666667*G14_0_0_1 + 0.666666666666668*G14_0_1_0 + 0.666666666666666*G14_0_3_1 - 0.666666666666666*G14_0_4_1 - 1.33333333333334*G14_0_5_0 - 0.666666666666667*G14_0_5_1 + 0.666666666666667*G14_1_1_0 + 0.666666666666665*G14_1_3_0 + 1.33333333333333*G14_1_3_1 - 0.666666666666665*G14_1_4_0 - 0.666666666666667*G14_1_5_0 - 1.33333333333333*G14_1_5_1 - 0.0111111111111111*G16_2 + 0.0444444444444445*G16_3 + 0.0444444444444444*G16_4 + 0.0888888888888889*G16_5 + 0.0111111111111111*G17_2 - 0.0444444444444445*G17_3 - 0.0444444444444444*G17_4 - 0.0888888888888889*G17_5;
    A[6] = -0.166666666666667*G1_0_0 - 0.166666666666668*G1_0_1 + 0.0154761904761905*G6_6_0_0 + 0.0154761904761905*G6_6_0_1 + 0.00357142857142859*G6_6_1_0 + 0.00357142857142856*G6_6_2_1 - 0.00476190476190475*G6_6_3_0 - 0.00476190476190467*G6_6_3_1 + 0.00476190476190475*G6_6_4_0 - 0.0190476190476191*G6_6_4_1 - 0.0190476190476191*G6_6_5_0 + 0.00476190476190476*G6_6_5_1 - 0.00178571428571428*G6_7_0_0 - 0.00178571428571429*G6_7_0_1 + 0.00178571428571428*G6_7_1_0 - 0.00218253968253968*G6_7_2_1 - 0.000793650793650795*G6_7_3_0 + 0.00317460317460316*G6_7_3_1 + 0.000793650793650795*G6_7_4_0 + 0.00396825396825398*G6_7_4_1 - 0.00317460317460318*G6_7_5_1 - 0.00178571428571429*G6_8_0_0 - 0.00178571428571429*G6_8_0_1 - 0.00218253968253969*G6_8_1_0 + 0.00178571428571429*G6_8_2_1 + 0.00317460317460317*G6_8_3_0 - 0.000793650793650811*G6_8_3_1 - 0.00317460317460317*G6_8_4_0 + 0.00396825396825397*G6_8_5_0 + 0.000793650793650795*G6_8_5_1 + 0.00238095238095238*G6_9_0_0 + 0.00238095238095235*G6_9_0_1 + 0.00396825396825397*G6_9_1_0 + 0.00396825396825398*G6_9_2_1 + 0.00952380952380951*G6_9_3_0 + 0.00952380952380944*G6_9_3_1 - 0.00952380952380951*G6_9_4_0 - 0.00634920634920629*G6_9_4_1 - 0.00634920634920635*G6_9_5_0 - 0.00952380952380953*G6_9_5_1 + 0.00952380952380953*G6_10_0_0 + 0.00952380952380953*G6_10_0_1 + 0.00317460317460318*G6_10_1_0 + 0.00634920634920636*G6_10_2_1 + 0.00634920634920634*G6_10_3_0 + 0.00317460317460316*G6_10_3_1 - 0.00634920634920634*G6_10_4_0 - 0.0158730158730159*G6_10_4_1 - 0.0126984126984127*G6_10_5_0 - 0.00317460317460318*G6_10_5_1 + 0.00952380952380953*G6_11_0_0 + 0.00952380952380952*G6_11_0_1 + 0.00634920634920636*G6_11_1_0 + 0.00317460317460318*G6_11_2_1 + 0.00317460317460318*G6_11_3_0 + 0.00634920634920634*G6_11_3_1 - 0.00317460317460318*G6_11_4_0 - 0.0126984126984127*G6_11_4_1 - 0.0158730158730159*G6_11_5_0 - 0.00634920634920636*G6_11_5_1 + 0.0154761904761905*G7_6_6_0 + 0.0154761904761905*G7_6_6_1 + 0.00357142857142859*G7_6_7_0 + 0.00357142857142856*G7_6_8_1 - 0.00476190476190475*G7_6_9_0 - 0.00476190476190467*G7_6_9_1 + 0.00476190476190475*G7_6_10_0 - 0.0190476190476191*G7_6_10_1 - 0.0190476190476191*G7_6_11_0 + 0.00476190476190476*G7_6_11_1 - 0.00178571428571428*G7_7_6_0 - 0.00178571428571429*G7_7_6_1 + 0.00178571428571428*G7_7_7_0 - 0.00218253968253968*G7_7_8_1 - 0.000793650793650795*G7_7_9_0 + 0.00317460317460316*G7_7_9_1 + 0.000793650793650795*G7_7_10_0 + 0.00396825396825398*G7_7_10_1 - 0.00317460317460318*G7_7_11_1 - 0.00178571428571429*G7_8_6_0 - 0.00178571428571429*G7_8_6_1 - 0.00218253968253969*G7_8_7_0 + 0.00178571428571429*G7_8_8_1 + 0.00317460317460317*G7_8_9_0 - 0.000793650793650811*G7_8_9_1 - 0.00317460317460317*G7_8_10_0 + 0.00396825396825397*G7_8_11_0 + 0.000793650793650795*G7_8_11_1 + 0.00238095238095238*G7_9_6_0 + 0.00238095238095235*G7_9_6_1 + 0.00396825396825397*G7_9_7_0 + 0.00396825396825398*G7_9_8_1 + 0.00952380952380951*G7_9_9_0 + 0.00952380952380944*G7_9_9_1 - 0.00952380952380951*G7_9_10_0 - 0.00634920634920629*G7_9_10_1 - 0.00634920634920635*G7_9_11_0 - 0.00952380952380953*G7_9_11_1 + 0.00952380952380953*G7_10_6_0 + 0.00952380952380953*G7_10_6_1 + 0.00317460317460318*G7_10_7_0 + 0.00634920634920636*G7_10_8_1 + 0.00634920634920634*G7_10_9_0 + 0.00317460317460316*G7_10_9_1 - 0.00634920634920634*G7_10_10_0 - 0.0158730158730159*G7_10_10_1 - 0.0126984126984127*G7_10_11_0 - 0.00317460317460318*G7_10_11_1 + 0.00952380952380953*G7_11_6_0 + 0.00952380952380952*G7_11_6_1 + 0.00634920634920636*G7_11_7_0 + 0.00317460317460318*G7_11_8_1 + 0.00317460317460318*G7_11_9_0 + 0.00634920634920634*G7_11_9_1 - 0.00317460317460318*G7_11_10_0 - 0.0126984126984127*G7_11_10_1 - 0.0158730158730159*G7_11_11_0 - 0.00634920634920636*G7_11_11_1 + 0.030952380952381*G10_0_6_0 + 0.030952380952381*G10_0_6_1 + 0.00714285714285718*G10_0_7_0 + 0.00714285714285713*G10_0_8_1 - 0.0095238095238095*G10_0_9_0 - 0.00952380952380934*G10_0_9_1 + 0.0095238095238095*G10_0_10_0 - 0.0380952380952382*G10_0_10_1 - 0.0380952380952381*G10_0_11_0 + 0.00952380952380952*G10_0_11_1 - 0.00357142857142857*G10_1_6_0 - 0.00357142857142859*G10_1_6_1 + 0.00357142857142857*G10_1_7_0 - 0.00436507936507937*G10_1_8_1 - 0.00158730158730159*G10_1_9_0 + 0.00634920634920631*G10_1_9_1 + 0.00158730158730159*G10_1_10_0 + 0.00793650793650797*G10_1_10_1 - 0.00634920634920635*G10_1_11_1 - 0.00357142857142858*G10_2_6_0 - 0.00357142857142859*G10_2_6_1 - 0.00436507936507937*G10_2_7_0 + 0.00357142857142858*G10_2_8_1 + 0.00634920634920634*G10_2_9_0 - 0.00158730158730162*G10_2_9_1 - 0.00634920634920634*G10_2_10_0 + 0.00793650793650795*G10_2_11_0 + 0.00158730158730159*G10_2_11_1 + 0.00476190476190477*G10_3_6_0 + 0.0047619047619047*G10_3_6_1 + 0.00793650793650794*G10_3_7_0 + 0.00793650793650796*G10_3_8_1 + 0.019047619047619*G10_3_9_0 + 0.0190476190476189*G10_3_9_1 - 0.019047619047619*G10_3_10_0 - 0.0126984126984126*G10_3_10_1 - 0.0126984126984127*G10_3_11_0 - 0.0190476190476191*G10_3_11_1 + 0.0190476190476191*G10_4_6_0 + 0.0190476190476191*G10_4_6_1 + 0.00634920634920637*G10_4_7_0 + 0.0126984126984127*G10_4_8_1 + 0.0126984126984127*G10_4_9_0 + 0.00634920634920632*G10_4_9_1 - 0.0126984126984127*G10_4_10_0 - 0.0317460317460317*G10_4_10_1 - 0.0253968253968254*G10_4_11_0 - 0.00634920634920635*G10_4_11_1 + 0.0190476190476191*G10_5_6_0 + 0.019047619047619*G10_5_6_1 + 0.0126984126984127*G10_5_7_0 + 0.00634920634920636*G10_5_8_1 + 0.00634920634920635*G10_5_9_0 + 0.0126984126984127*G10_5_9_1 - 0.00634920634920635*G10_5_10_0 - 0.0253968253968254*G10_5_10_1 - 0.0317460317460318*G10_5_11_0 - 0.0126984126984127*G10_5_11_1 + 0.030952380952381*G11_6_6_0 + 0.030952380952381*G11_6_6_1 + 0.00714285714285718*G11_6_7_0 + 0.00714285714285713*G11_6_8_1 - 0.0095238095238095*G11_6_9_0 - 0.00952380952380934*G11_6_9_1 + 0.0095238095238095*G11_6_10_0 - 0.0380952380952382*G11_6_10_1 - 0.0380952380952381*G11_6_11_0 + 0.00952380952380952*G11_6_11_1 - 0.00357142857142857*G11_7_6_0 - 0.00357142857142859*G11_7_6_1 + 0.00357142857142857*G11_7_7_0 - 0.00436507936507937*G11_7_8_1 - 0.00158730158730159*G11_7_9_0 + 0.00634920634920631*G11_7_9_1 + 0.00158730158730159*G11_7_10_0 + 0.00793650793650797*G11_7_10_1 - 0.00634920634920635*G11_7_11_1 - 0.00357142857142858*G11_8_6_0 - 0.00357142857142859*G11_8_6_1 - 0.00436507936507937*G11_8_7_0 + 0.00357142857142858*G11_8_8_1 + 0.00634920634920634*G11_8_9_0 - 0.00158730158730162*G11_8_9_1 - 0.00634920634920634*G11_8_10_0 + 0.00793650793650795*G11_8_11_0 + 0.00158730158730159*G11_8_11_1 + 0.00476190476190477*G11_9_6_0 + 0.0047619047619047*G11_9_6_1 + 0.00793650793650794*G11_9_7_0 + 0.00793650793650796*G11_9_8_1 + 0.019047619047619*G11_9_9_0 + 0.0190476190476189*G11_9_9_1 - 0.019047619047619*G11_9_10_0 - 0.0126984126984126*G11_9_10_1 - 0.0126984126984127*G11_9_11_0 - 0.0190476190476191*G11_9_11_1 + 0.0190476190476191*G11_10_6_0 + 0.0190476190476191*G11_10_6_1 + 0.00634920634920637*G11_10_7_0 + 0.0126984126984127*G11_10_8_1 + 0.0126984126984127*G11_10_9_0 + 0.00634920634920632*G11_10_9_1 - 0.0126984126984127*G11_10_10_0 - 0.0317460317460317*G11_10_10_1 - 0.0253968253968254*G11_10_11_0 - 0.00634920634920635*G11_10_11_1 + 0.0190476190476191*G11_11_6_0 + 0.019047619047619*G11_11_6_1 + 0.0126984126984127*G11_11_7_0 + 0.00634920634920636*G11_11_8_1 + 0.00634920634920635*G11_11_9_0 + 0.0126984126984127*G11_11_9_1 - 0.00634920634920635*G11_11_10_0 - 0.0253968253968254*G11_11_10_1 - 0.0317460317460318*G11_11_11_0 - 0.0126984126984127*G11_11_11_1 - 0.5*G13_0_6_0 - 0.5*G13_0_6_1 - 0.166666666666668*G13_0_7_0 - 0.166666666666666*G13_0_8_1 + 0.666666666666668*G13_0_10_1 + 0.666666666666668*G13_0_11_0 - 0.5*G13_1_6_0 - 0.500000000000002*G13_1_6_1 - 0.166666666666666*G13_1_7_0 - 0.166666666666666*G13_1_8_1 + 0.666666666666668*G13_1_10_1 + 0.666666666666667*G13_1_11_0 - 0.5*G15_0_6_0 - 0.5*G15_0_6_1 - 0.166666666666668*G15_0_7_0 - 0.166666666666666*G15_0_8_1 + 0.666666666666668*G15_0_10_1 + 0.666666666666668*G15_0_11_0 - 0.5*G15_1_6_0 - 0.500000000000002*G15_1_6_1 - 0.166666666666666*G15_1_7_0 - 0.166666666666666*G15_1_8_1 + 0.666666666666668*G15_1_10_1 + 0.666666666666667*G15_1_11_0 + 0.0166666666666667*G18_6 - 0.00277777777777778*G18_7 - 0.00277777777777778*G18_8 - 0.0111111111111111*G18_9 - 0.0166666666666667*G19_6 + 0.00277777777777778*G19_7 + 0.00277777777777778*G19_8 + 0.0111111111111111*G19_9;
    A[7] = 0.166666666666667*G1_1_0 - 0.00178571428571428*G6_6_0_0 - 0.00178571428571429*G6_6_0_1 + 0.00178571428571428*G6_6_1_0 - 0.00218253968253968*G6_6_2_1 - 0.000793650793650795*G6_6_3_0 + 0.00317460317460316*G6_6_3_1 + 0.000793650793650795*G6_6_4_0 + 0.00396825396825398*G6_6_4_1 - 0.00317460317460317*G6_6_5_1 - 0.00357142857142858*G6_7_0_0 - 0.00357142857142852*G6_7_0_1 - 0.0154761904761905*G6_7_1_0 + 0.00357142857142856*G6_7_2_1 - 0.00476190476190475*G6_7_3_0 - 0.0238095238095237*G6_7_3_1 + 0.00476190476190475*G6_7_4_0 + 0.019047619047619*G6_7_5_0 + 0.0238095238095238*G6_7_5_1 + 0.00218253968253968*G6_8_0_0 + 0.00218253968253967*G6_8_0_1 + 0.00178571428571428*G6_8_1_0 + 0.00178571428571429*G6_8_2_1 + 0.00317460317460317*G6_8_3_0 + 0.00317460317460315*G6_8_3_1 - 0.00317460317460317*G6_8_4_0 - 0.00396825396825395*G6_8_4_1 - 0.00396825396825397*G6_8_5_0 - 0.00317460317460317*G6_8_5_1 - 0.00317460317460318*G6_9_0_0 - 0.00317460317460317*G6_9_0_1 - 0.00952380952380953*G6_9_1_0 + 0.00634920634920636*G6_9_2_1 + 0.00634920634920635*G6_9_3_0 - 0.00952380952380951*G6_9_3_1 - 0.00634920634920635*G6_9_4_0 - 0.00317460317460319*G6_9_4_1 + 0.0126984126984127*G6_9_5_0 + 0.00952380952380953*G6_9_5_1 - 0.00396825396825397*G6_10_0_0 - 0.003968253968254*G6_10_0_1 - 0.00238095238095238*G6_10_1_0 + 0.00396825396825398*G6_10_2_1 + 0.00952380952380951*G6_10_3_0 + 0.00317460317460311*G6_10_3_1 - 0.00952380952380951*G6_10_4_0 + 0.00634920634920635*G6_10_5_0 - 0.00317460317460318*G6_10_5_1 - 0.00634920634920636*G6_11_0_0 - 0.00634920634920634*G6_11_0_1 - 0.00952380952380953*G6_11_1_0 + 0.00317460317460318*G6_11_2_1 + 0.00317460317460317*G6_11_3_0 - 0.00952380952380952*G6_11_3_1 - 0.00317460317460317*G6_11_4_0 + 0.00317460317460315*G6_11_4_1 + 0.0158730158730159*G6_11_5_0 + 0.00952380952380954*G6_11_5_1 - 0.00178571428571428*G7_6_6_0 - 0.00178571428571429*G7_6_6_1 + 0.00178571428571428*G7_6_7_0 - 0.00218253968253968*G7_6_8_1 - 0.000793650793650795*G7_6_9_0 + 0.00317460317460316*G7_6_9_1 + 0.000793650793650795*G7_6_10_0 + 0.00396825396825398*G7_6_10_1 - 0.00317460317460317*G7_6_11_1 - 0.00357142857142858*G7_7_6_0 - 0.00357142857142852*G7_7_6_1 - 0.0154761904761905*G7_7_7_0 + 0.00357142857142856*G7_7_8_1 - 0.00476190476190475*G7_7_9_0 - 0.0238095238095237*G7_7_9_1 + 0.00476190476190475*G7_7_10_0 + 0.019047619047619*G7_7_11_0 + 0.0238095238095238*G7_7_11_1 + 0.00218253968253968*G7_8_6_0 + 0.00218253968253967*G7_8_6_1 + 0.00178571428571428*G7_8_7_0 + 0.00178571428571429*G7_8_8_1 + 0.00317460317460317*G7_8_9_0 + 0.00317460317460315*G7_8_9_1 - 0.00317460317460317*G7_8_10_0 - 0.00396825396825395*G7_8_10_1 - 0.00396825396825397*G7_8_11_0 - 0.00317460317460317*G7_8_11_1 - 0.00317460317460318*G7_9_6_0 - 0.00317460317460317*G7_9_6_1 - 0.00952380952380953*G7_9_7_0 + 0.00634920634920636*G7_9_8_1 + 0.00634920634920635*G7_9_9_0 - 0.00952380952380951*G7_9_9_1 - 0.00634920634920635*G7_9_10_0 - 0.00317460317460319*G7_9_10_1 + 0.0126984126984127*G7_9_11_0 + 0.00952380952380953*G7_9_11_1 - 0.00396825396825397*G7_10_6_0 - 0.003968253968254*G7_10_6_1 - 0.00238095238095238*G7_10_7_0 + 0.00396825396825398*G7_10_8_1 + 0.00952380952380951*G7_10_9_0 + 0.00317460317460311*G7_10_9_1 - 0.00952380952380951*G7_10_10_0 + 0.00634920634920635*G7_10_11_0 - 0.00317460317460318*G7_10_11_1 - 0.00634920634920636*G7_11_6_0 - 0.00634920634920634*G7_11_6_1 - 0.00952380952380953*G7_11_7_0 + 0.00317460317460318*G7_11_8_1 + 0.00317460317460317*G7_11_9_0 - 0.00952380952380952*G7_11_9_1 - 0.00317460317460317*G7_11_10_0 + 0.00317460317460315*G7_11_10_1 + 0.0158730158730159*G7_11_11_0 + 0.00952380952380954*G7_11_11_1 - 0.00357142857142857*G10_0_6_0 - 0.00357142857142859*G10_0_6_1 + 0.00357142857142857*G10_0_7_0 - 0.00436507936507937*G10_0_8_1 - 0.00158730158730159*G10_0_9_0 + 0.00634920634920631*G10_0_9_1 + 0.00158730158730159*G10_0_10_0 + 0.00793650793650797*G10_0_10_1 - 0.00634920634920635*G10_0_11_1 - 0.00714285714285717*G10_1_6_0 - 0.00714285714285704*G10_1_6_1 - 0.0309523809523809*G10_1_7_0 + 0.00714285714285713*G10_1_8_1 - 0.0095238095238095*G10_1_9_0 - 0.0476190476190473*G10_1_9_1 + 0.0095238095238095*G10_1_10_0 + 0.0380952380952381*G10_1_11_0 + 0.0476190476190476*G10_1_11_1 + 0.00436507936507936*G10_2_6_0 + 0.00436507936507934*G10_2_6_1 + 0.00357142857142857*G10_2_7_0 + 0.00357142857142858*G10_2_8_1 + 0.00634920634920633*G10_2_9_0 + 0.0063492063492063*G10_2_9_1 - 0.00634920634920633*G10_2_10_0 - 0.00793650793650789*G10_2_10_1 - 0.00793650793650793*G10_2_11_0 - 0.00634920634920634*G10_2_11_1 - 0.00634920634920636*G10_3_6_0 - 0.00634920634920634*G10_3_6_1 - 0.0190476190476191*G10_3_7_0 + 0.0126984126984127*G10_3_8_1 + 0.0126984126984127*G10_3_9_0 - 0.019047619047619*G10_3_9_1 - 0.0126984126984127*G10_3_10_0 - 0.00634920634920639*G10_3_10_1 + 0.0253968253968254*G10_3_11_0 + 0.0190476190476191*G10_3_11_1 - 0.00793650793650794*G10_4_6_0 - 0.00793650793650799*G10_4_6_1 - 0.00476190476190477*G10_4_7_0 + 0.00793650793650796*G10_4_8_1 + 0.019047619047619*G10_4_9_0 + 0.00634920634920622*G10_4_9_1 - 0.019047619047619*G10_4_10_0 + 0.0126984126984127*G10_4_11_0 - 0.00634920634920636*G10_4_11_1 - 0.0126984126984127*G10_5_6_0 - 0.0126984126984127*G10_5_6_1 - 0.0190476190476191*G10_5_7_0 + 0.00634920634920637*G10_5_8_1 + 0.00634920634920635*G10_5_9_0 - 0.019047619047619*G10_5_9_1 - 0.00634920634920635*G10_5_10_0 + 0.0063492063492063*G10_5_10_1 + 0.0317460317460318*G10_5_11_0 + 0.0190476190476191*G10_5_11_1 - 0.00357142857142857*G11_6_6_0 - 0.00357142857142859*G11_6_6_1 + 0.00357142857142857*G11_6_7_0 - 0.00436507936507937*G11_6_8_1 - 0.00158730158730159*G11_6_9_0 + 0.00634920634920631*G11_6_9_1 + 0.00158730158730159*G11_6_10_0 + 0.00793650793650797*G11_6_10_1 - 0.00634920634920635*G11_6_11_1 - 0.00714285714285717*G11_7_6_0 - 0.00714285714285704*G11_7_6_1 - 0.0309523809523809*G11_7_7_0 + 0.00714285714285713*G11_7_8_1 - 0.0095238095238095*G11_7_9_0 - 0.0476190476190473*G11_7_9_1 + 0.0095238095238095*G11_7_10_0 + 0.0380952380952381*G11_7_11_0 + 0.0476190476190476*G11_7_11_1 + 0.00436507936507936*G11_8_6_0 + 0.00436507936507934*G11_8_6_1 + 0.00357142857142857*G11_8_7_0 + 0.00357142857142858*G11_8_8_1 + 0.00634920634920633*G11_8_9_0 + 0.0063492063492063*G11_8_9_1 - 0.00634920634920633*G11_8_10_0 - 0.00793650793650789*G11_8_10_1 - 0.00793650793650793*G11_8_11_0 - 0.00634920634920634*G11_8_11_1 - 0.00634920634920636*G11_9_6_0 - 0.00634920634920634*G11_9_6_1 - 0.0190476190476191*G11_9_7_0 + 0.0126984126984127*G11_9_8_1 + 0.0126984126984127*G11_9_9_0 - 0.019047619047619*G11_9_9_1 - 0.0126984126984127*G11_9_10_0 - 0.00634920634920639*G11_9_10_1 + 0.0253968253968254*G11_9_11_0 + 0.0190476190476191*G11_9_11_1 - 0.00793650793650794*G11_10_6_0 - 0.00793650793650799*G11_10_6_1 - 0.00476190476190477*G11_10_7_0 + 0.00793650793650796*G11_10_8_1 + 0.019047619047619*G11_10_9_0 + 0.00634920634920622*G11_10_9_1 - 0.019047619047619*G11_10_10_0 + 0.0126984126984127*G11_10_11_0 - 0.00634920634920636*G11_10_11_1 - 0.0126984126984127*G11_11_6_0 - 0.0126984126984127*G11_11_6_1 - 0.0190476190476191*G11_11_7_0 + 0.00634920634920637*G11_11_8_1 + 0.00634920634920635*G11_11_9_0 - 0.019047619047619*G11_11_9_1 - 0.00634920634920635*G11_11_10_0 + 0.0063492063492063*G11_11_10_1 + 0.0317460317460318*G11_11_11_0 + 0.0190476190476191*G11_11_11_1 - 0.166666666666668*G13_0_6_0 - 0.166666666666666*G13_0_6_1 - 0.5*G13_0_7_0 + 0.166666666666667*G13_0_8_1 - 0.666666666666664*G13_0_9_1 + 0.666666666666668*G13_0_11_0 + 0.666666666666667*G13_0_11_1 - 0.166666666666668*G15_0_6_0 - 0.166666666666666*G15_0_6_1 - 0.5*G15_0_7_0 + 0.166666666666667*G15_0_8_1 - 0.666666666666664*G15_0_9_1 + 0.666666666666668*G15_0_11_0 + 0.666666666666667*G15_0_11_1 - 0.00277777777777778*G18_6 + 0.0166666666666667*G18_7 - 0.00277777777777778*G18_8 - 0.0111111111111111*G18_10 + 0.00277777777777778*G19_6 - 0.0166666666666667*G19_7 + 0.00277777777777778*G19_8 + 0.0111111111111111*G19_10;
    A[8] = 0.166666666666667*G1_2_1 - 0.00178571428571429*G6_6_0_0 - 0.00178571428571429*G6_6_0_1 - 0.00218253968253969*G6_6_1_0 + 0.00178571428571429*G6_6_2_1 + 0.00317460317460317*G6_6_3_0 - 0.000793650793650811*G6_6_3_1 - 0.00317460317460317*G6_6_4_0 + 0.00396825396825397*G6_6_5_0 + 0.000793650793650795*G6_6_5_1 + 0.00218253968253968*G6_7_0_0 + 0.00218253968253967*G6_7_0_1 + 0.00178571428571428*G6_7_1_0 + 0.00178571428571429*G6_7_2_1 + 0.00317460317460317*G6_7_3_0 + 0.00317460317460315*G6_7_3_1 - 0.00317460317460317*G6_7_4_0 - 0.00396825396825395*G6_7_4_1 - 0.00396825396825397*G6_7_5_0 - 0.00317460317460317*G6_7_5_1 - 0.00357142857142856*G6_8_0_0 - 0.00357142857142852*G6_8_0_1 + 0.00357142857142857*G6_8_1_0 - 0.0154761904761905*G6_8_2_1 - 0.0238095238095238*G6_8_3_0 - 0.00476190476190463*G6_8_3_1 + 0.0238095238095238*G6_8_4_0 + 0.0190476190476189*G6_8_4_1 + 0.00476190476190476*G6_8_5_1 - 0.00317460317460316*G6_9_0_0 - 0.00317460317460317*G6_9_0_1 + 0.00634920634920635*G6_9_1_0 - 0.00952380952380952*G6_9_2_1 - 0.0095238095238095*G6_9_3_0 + 0.00634920634920636*G6_9_3_1 + 0.0095238095238095*G6_9_4_0 + 0.0126984126984127*G6_9_4_1 - 0.00317460317460319*G6_9_5_0 - 0.00634920634920635*G6_9_5_1 - 0.00634920634920634*G6_10_0_0 - 0.00634920634920634*G6_10_0_1 + 0.00317460317460317*G6_10_1_0 - 0.00952380952380953*G6_10_2_1 - 0.00952380952380951*G6_10_3_0 + 0.00317460317460319*G6_10_3_1 + 0.00952380952380951*G6_10_4_0 + 0.0158730158730159*G6_10_4_1 + 0.00317460317460317*G6_10_5_0 - 0.00317460317460318*G6_10_5_1 - 0.00396825396825396*G6_11_0_0 - 0.003968253968254*G6_11_0_1 + 0.00396825396825396*G6_11_1_0 - 0.00238095238095238*G6_11_2_1 + 0.00317460317460316*G6_11_3_0 + 0.00952380952380946*G6_11_3_1 - 0.00317460317460316*G6_11_4_0 + 0.00634920634920641*G6_11_4_1 - 0.00952380952380953*G6_11_5_1 - 0.00178571428571429*G7_6_6_0 - 0.00178571428571429*G7_6_6_1 - 0.00218253968253969*G7_6_7_0 + 0.00178571428571429*G7_6_8_1 + 0.00317460317460317*G7_6_9_0 - 0.000793650793650811*G7_6_9_1 - 0.00317460317460317*G7_6_10_0 + 0.00396825396825397*G7_6_11_0 + 0.000793650793650795*G7_6_11_1 + 0.00218253968253968*G7_7_6_0 + 0.00218253968253967*G7_7_6_1 + 0.00178571428571428*G7_7_7_0 + 0.00178571428571429*G7_7_8_1 + 0.00317460317460317*G7_7_9_0 + 0.00317460317460315*G7_7_9_1 - 0.00317460317460317*G7_7_10_0 - 0.00396825396825395*G7_7_10_1 - 0.00396825396825397*G7_7_11_0 - 0.00317460317460317*G7_7_11_1 - 0.00357142857142856*G7_8_6_0 - 0.00357142857142852*G7_8_6_1 + 0.00357142857142857*G7_8_7_0 - 0.0154761904761905*G7_8_8_1 - 0.0238095238095238*G7_8_9_0 - 0.00476190476190463*G7_8_9_1 + 0.0238095238095238*G7_8_10_0 + 0.0190476190476189*G7_8_10_1 + 0.00476190476190476*G7_8_11_1 - 0.00317460317460316*G7_9_6_0 - 0.00317460317460317*G7_9_6_1 + 0.00634920634920635*G7_9_7_0 - 0.00952380952380952*G7_9_8_1 - 0.0095238095238095*G7_9_9_0 + 0.00634920634920636*G7_9_9_1 + 0.0095238095238095*G7_9_10_0 + 0.0126984126984127*G7_9_10_1 - 0.00317460317460319*G7_9_11_0 - 0.00634920634920635*G7_9_11_1 - 0.00634920634920634*G7_10_6_0 - 0.00634920634920634*G7_10_6_1 + 0.00317460317460317*G7_10_7_0 - 0.00952380952380953*G7_10_8_1 - 0.00952380952380951*G7_10_9_0 + 0.00317460317460319*G7_10_9_1 + 0.00952380952380951*G7_10_10_0 + 0.0158730158730159*G7_10_10_1 + 0.00317460317460317*G7_10_11_0 - 0.00317460317460318*G7_10_11_1 - 0.00396825396825396*G7_11_6_0 - 0.003968253968254*G7_11_6_1 + 0.00396825396825396*G7_11_7_0 - 0.00238095238095238*G7_11_8_1 + 0.00317460317460316*G7_11_9_0 + 0.00952380952380946*G7_11_9_1 - 0.00317460317460316*G7_11_10_0 + 0.00634920634920641*G7_11_10_1 - 0.00952380952380953*G7_11_11_1 - 0.00357142857142858*G10_0_6_0 - 0.00357142857142859*G10_0_6_1 - 0.00436507936507937*G10_0_7_0 + 0.00357142857142858*G10_0_8_1 + 0.00634920634920634*G10_0_9_0 - 0.00158730158730162*G10_0_9_1 - 0.00634920634920634*G10_0_10_0 + 0.00793650793650795*G10_0_11_0 + 0.00158730158730159*G10_0_11_1 + 0.00436507936507936*G10_1_6_0 + 0.00436507936507934*G10_1_6_1 + 0.00357142857142857*G10_1_7_0 + 0.00357142857142857*G10_1_8_1 + 0.00634920634920634*G10_1_9_0 + 0.0063492063492063*G10_1_9_1 - 0.00634920634920634*G10_1_10_0 - 0.00793650793650789*G10_1_10_1 - 0.00793650793650793*G10_1_11_0 - 0.00634920634920635*G10_1_11_1 - 0.00714285714285712*G10_2_6_0 - 0.00714285714285703*G10_2_6_1 + 0.00714285714285715*G10_2_7_0 - 0.030952380952381*G10_2_8_1 - 0.0476190476190475*G10_2_9_0 - 0.00952380952380926*G10_2_9_1 + 0.0476190476190475*G10_2_10_0 + 0.0380952380952379*G10_2_10_1 + 0.00952380952380951*G10_2_11_1 - 0.00634920634920632*G10_3_6_0 - 0.00634920634920633*G10_3_6_1 + 0.0126984126984127*G10_3_7_0 - 0.019047619047619*G10_3_8_1 - 0.019047619047619*G10_3_9_0 + 0.0126984126984127*G10_3_9_1 + 0.019047619047619*G10_3_10_0 + 0.0253968253968254*G10_3_10_1 - 0.00634920634920638*G10_3_11_0 - 0.0126984126984127*G10_3_11_1 - 0.0126984126984127*G10_4_6_0 - 0.0126984126984127*G10_4_6_1 + 0.00634920634920634*G10_4_7_0 - 0.0190476190476191*G10_4_8_1 - 0.019047619047619*G10_4_9_0 + 0.00634920634920638*G10_4_9_1 + 0.019047619047619*G10_4_10_0 + 0.0317460317460317*G10_4_10_1 + 0.00634920634920633*G10_4_11_0 - 0.00634920634920635*G10_4_11_1 - 0.00793650793650792*G10_5_6_0 - 0.00793650793650799*G10_5_6_1 + 0.00793650793650793*G10_5_7_0 - 0.00476190476190476*G10_5_8_1 + 0.00634920634920632*G10_5_9_0 + 0.0190476190476189*G10_5_9_1 - 0.00634920634920632*G10_5_10_0 + 0.0126984126984128*G10_5_10_1 - 0.0190476190476191*G10_5_11_1 - 0.00357142857142858*G11_6_6_0 - 0.00357142857142859*G11_6_6_1 - 0.00436507936507937*G11_6_7_0 + 0.00357142857142858*G11_6_8_1 + 0.00634920634920634*G11_6_9_0 - 0.00158730158730162*G11_6_9_1 - 0.00634920634920634*G11_6_10_0 + 0.00793650793650795*G11_6_11_0 + 0.00158730158730159*G11_6_11_1 + 0.00436507936507936*G11_7_6_0 + 0.00436507936507934*G11_7_6_1 + 0.00357142857142857*G11_7_7_0 + 0.00357142857142857*G11_7_8_1 + 0.00634920634920634*G11_7_9_0 + 0.0063492063492063*G11_7_9_1 - 0.00634920634920634*G11_7_10_0 - 0.00793650793650789*G11_7_10_1 - 0.00793650793650793*G11_7_11_0 - 0.00634920634920635*G11_7_11_1 - 0.00714285714285712*G11_8_6_0 - 0.00714285714285703*G11_8_6_1 + 0.00714285714285715*G11_8_7_0 - 0.030952380952381*G11_8_8_1 - 0.0476190476190475*G11_8_9_0 - 0.00952380952380926*G11_8_9_1 + 0.0476190476190475*G11_8_10_0 + 0.0380952380952379*G11_8_10_1 + 0.00952380952380951*G11_8_11_1 - 0.00634920634920632*G11_9_6_0 - 0.00634920634920633*G11_9_6_1 + 0.0126984126984127*G11_9_7_0 - 0.019047619047619*G11_9_8_1 - 0.019047619047619*G11_9_9_0 + 0.0126984126984127*G11_9_9_1 + 0.019047619047619*G11_9_10_0 + 0.0253968253968254*G11_9_10_1 - 0.00634920634920638*G11_9_11_0 - 0.0126984126984127*G11_9_11_1 - 0.0126984126984127*G11_10_6_0 - 0.0126984126984127*G11_10_6_1 + 0.00634920634920634*G11_10_7_0 - 0.0190476190476191*G11_10_8_1 - 0.019047619047619*G11_10_9_0 + 0.00634920634920638*G11_10_9_1 + 0.019047619047619*G11_10_10_0 + 0.0317460317460317*G11_10_10_1 + 0.00634920634920633*G11_10_11_0 - 0.00634920634920635*G11_10_11_1 - 0.00793650793650792*G11_11_6_0 - 0.00793650793650799*G11_11_6_1 + 0.00793650793650793*G11_11_7_0 - 0.00476190476190476*G11_11_8_1 + 0.00634920634920632*G11_11_9_0 + 0.0190476190476189*G11_11_9_1 - 0.00634920634920632*G11_11_10_0 + 0.0126984126984128*G11_11_10_1 - 0.0190476190476191*G11_11_11_1 - 0.166666666666666*G13_1_6_0 - 0.166666666666666*G13_1_6_1 + 0.166666666666667*G13_1_7_0 - 0.5*G13_1_8_1 - 0.666666666666667*G13_1_9_0 + 0.666666666666667*G13_1_10_0 + 0.666666666666665*G13_1_10_1 - 0.166666666666666*G15_1_6_0 - 0.166666666666666*G15_1_6_1 + 0.166666666666667*G15_1_7_0 - 0.5*G15_1_8_1 - 0.666666666666667*G15_1_9_0 + 0.666666666666667*G15_1_10_0 + 0.666666666666665*G15_1_10_1 - 0.00277777777777778*G18_6 - 0.00277777777777778*G18_7 + 0.0166666666666666*G18_8 - 0.0111111111111111*G18_11 + 0.00277777777777778*G19_6 + 0.00277777777777778*G19_7 - 0.0166666666666666*G19_8 + 0.0111111111111111*G19_11;
    A[9] = 0.166666666666666*G1_0_0 + 0.166666666666665*G1_0_1 + 0.166666666666666*G1_1_0 + 0.333333333333331*G1_1_1 + 0.333333333333333*G1_2_0 + 0.166666666666664*G1_2_1 + 0.00238095238095238*G6_6_0_0 + 0.00238095238095235*G6_6_0_1 + 0.00396825396825397*G6_6_1_0 + 0.00396825396825398*G6_6_2_1 + 0.00952380952380951*G6_6_3_0 + 0.00952380952380944*G6_6_3_1 - 0.00952380952380951*G6_6_4_0 - 0.00634920634920629*G6_6_4_1 - 0.00634920634920635*G6_6_5_0 - 0.00952380952380953*G6_6_5_1 - 0.00317460317460318*G6_7_0_0 - 0.00317460317460317*G6_7_0_1 - 0.00952380952380953*G6_7_1_0 + 0.00634920634920636*G6_7_2_1 + 0.00634920634920634*G6_7_3_0 - 0.00952380952380952*G6_7_3_1 - 0.00634920634920634*G6_7_4_0 - 0.00317460317460319*G6_7_4_1 + 0.0126984126984127*G6_7_5_0 + 0.00952380952380953*G6_7_5_1 - 0.00317460317460316*G6_8_0_0 - 0.00317460317460317*G6_8_0_1 + 0.00634920634920635*G6_8_1_0 - 0.00952380952380952*G6_8_2_1 - 0.0095238095238095*G6_8_3_0 + 0.00634920634920636*G6_8_3_1 + 0.0095238095238095*G6_8_4_0 + 0.0126984126984127*G6_8_4_1 - 0.00317460317460319*G6_8_5_0 - 0.00634920634920635*G6_8_5_1 - 0.0190476190476191*G6_9_0_0 - 0.0190476190476188*G6_9_0_1 - 0.0317460317460317*G6_9_1_0 - 0.0317460317460318*G6_9_2_1 - 0.076190476190476*G6_9_3_0 - 0.0761904761904755*G6_9_3_1 + 0.076190476190476*G6_9_4_0 + 0.0507936507936503*G6_9_4_1 + 0.0507936507936508*G6_9_5_0 + 0.0761904761904762*G6_9_5_1 + 0.00317460317460316*G6_10_0_0 + 0.00317460317460329*G6_10_0_1 - 0.00317460317460316*G6_10_1_0 - 0.0158730158730159*G6_10_2_1 - 0.038095238095238*G6_10_3_0 - 0.0253968253968251*G6_10_3_1 + 0.038095238095238*G6_10_4_0 + 0.0126984126984125*G6_10_4_1 + 0.0253968253968254*G6_10_5_1 + 0.00317460317460315*G6_11_0_0 + 0.00317460317460328*G6_11_0_1 - 0.0158730158730159*G6_11_1_0 - 0.00317460317460321*G6_11_2_1 - 0.0253968253968254*G6_11_3_0 - 0.0380952380952378*G6_11_3_1 + 0.0253968253968254*G6_11_4_0 + 0.0126984126984127*G6_11_5_0 + 0.0380952380952381*G6_11_5_1 + 0.00238095238095238*G7_6_6_0 + 0.00238095238095235*G7_6_6_1 + 0.00396825396825397*G7_6_7_0 + 0.00396825396825398*G7_6_8_1 + 0.00952380952380951*G7_6_9_0 + 0.00952380952380944*G7_6_9_1 - 0.00952380952380951*G7_6_10_0 - 0.00634920634920629*G7_6_10_1 - 0.00634920634920635*G7_6_11_0 - 0.00952380952380953*G7_6_11_1 - 0.00317460317460318*G7_7_6_0 - 0.00317460317460317*G7_7_6_1 - 0.00952380952380953*G7_7_7_0 + 0.00634920634920636*G7_7_8_1 + 0.00634920634920634*G7_7_9_0 - 0.00952380952380952*G7_7_9_1 - 0.00634920634920634*G7_7_10_0 - 0.00317460317460319*G7_7_10_1 + 0.0126984126984127*G7_7_11_0 + 0.00952380952380953*G7_7_11_1 - 0.00317460317460316*G7_8_6_0 - 0.00317460317460317*G7_8_6_1 + 0.00634920634920635*G7_8_7_0 - 0.00952380952380952*G7_8_8_1 - 0.0095238095238095*G7_8_9_0 + 0.00634920634920636*G7_8_9_1 + 0.0095238095238095*G7_8_10_0 + 0.0126984126984127*G7_8_10_1 - 0.00317460317460319*G7_8_11_0 - 0.00634920634920635*G7_8_11_1 - 0.0190476190476191*G7_9_6_0 - 0.0190476190476188*G7_9_6_1 - 0.0317460317460317*G7_9_7_0 - 0.0317460317460318*G7_9_8_1 - 0.076190476190476*G7_9_9_0 - 0.0761904761904755*G7_9_9_1 + 0.076190476190476*G7_9_10_0 + 0.0507936507936503*G7_9_10_1 + 0.0507936507936508*G7_9_11_0 + 0.0761904761904762*G7_9_11_1 + 0.00317460317460316*G7_10_6_0 + 0.00317460317460329*G7_10_6_1 - 0.00317460317460316*G7_10_7_0 - 0.0158730158730159*G7_10_8_1 - 0.038095238095238*G7_10_9_0 - 0.0253968253968251*G7_10_9_1 + 0.038095238095238*G7_10_10_0 + 0.0126984126984125*G7_10_10_1 + 0.0253968253968254*G7_10_11_1 + 0.00317460317460315*G7_11_6_0 + 0.00317460317460328*G7_11_6_1 - 0.0158730158730159*G7_11_7_0 - 0.00317460317460321*G7_11_8_1 - 0.0253968253968254*G7_11_9_0 - 0.0380952380952378*G7_11_9_1 + 0.0253968253968254*G7_11_10_0 + 0.0126984126984127*G7_11_11_0 + 0.0380952380952381*G7_11_11_1 + 0.00476190476190477*G10_0_6_0 + 0.0047619047619047*G10_0_6_1 + 0.00793650793650794*G10_0_7_0 + 0.00793650793650796*G10_0_8_1 + 0.019047619047619*G10_0_9_0 + 0.0190476190476189*G10_0_9_1 - 0.019047619047619*G10_0_10_0 - 0.0126984126984126*G10_0_10_1 - 0.0126984126984127*G10_0_11_0 - 0.0190476190476191*G10_0_11_1 - 0.00634920634920636*G10_1_6_0 - 0.00634920634920635*G10_1_6_1 - 0.0190476190476191*G10_1_7_0 + 0.0126984126984127*G10_1_8_1 + 0.0126984126984127*G10_1_9_0 - 0.019047619047619*G10_1_9_1 - 0.0126984126984127*G10_1_10_0 - 0.00634920634920639*G10_1_10_1 + 0.0253968253968254*G10_1_11_0 + 0.0190476190476191*G10_1_11_1 - 0.00634920634920632*G10_2_6_0 - 0.00634920634920633*G10_2_6_1 + 0.0126984126984127*G10_2_7_0 - 0.019047619047619*G10_2_8_1 - 0.019047619047619*G10_2_9_0 + 0.0126984126984127*G10_2_9_1 + 0.019047619047619*G10_2_10_0 + 0.0253968253968254*G10_2_10_1 - 0.00634920634920638*G10_2_11_0 - 0.0126984126984127*G10_2_11_1 - 0.0380952380952381*G10_3_6_0 - 0.0380952380952375*G10_3_6_1 - 0.0634920634920635*G10_3_7_0 - 0.0634920634920636*G10_3_8_1 - 0.152380952380952*G10_3_9_0 - 0.152380952380951*G10_3_9_1 + 0.152380952380952*G10_3_10_0 + 0.101587301587301*G10_3_10_1 + 0.101587301587302*G10_3_11_0 + 0.152380952380952*G10_3_11_1 + 0.00634920634920632*G10_4_6_0 + 0.00634920634920658*G10_4_6_1 - 0.00634920634920632*G10_4_7_0 - 0.0317460317460318*G10_4_8_1 - 0.0761904761904761*G10_4_9_0 - 0.0507936507936502*G10_4_9_1 + 0.0761904761904761*G10_4_10_0 + 0.025396825396825*G10_4_10_1 + 0.0507936507936508*G10_4_11_1 + 0.00634920634920629*G10_5_6_0 + 0.00634920634920657*G10_5_6_1 - 0.0317460317460317*G10_5_7_0 - 0.00634920634920642*G10_5_8_1 - 0.0507936507936507*G10_5_9_0 - 0.0761904761904756*G10_5_9_1 + 0.0507936507936507*G10_5_10_0 + 0.0253968253968254*G10_5_11_0 + 0.0761904761904763*G10_5_11_1 + 0.00476190476190477*G11_6_6_0 + 0.0047619047619047*G11_6_6_1 + 0.00793650793650794*G11_6_7_0 + 0.00793650793650796*G11_6_8_1 + 0.019047619047619*G11_6_9_0 + 0.0190476190476189*G11_6_9_1 - 0.019047619047619*G11_6_10_0 - 0.0126984126984126*G11_6_10_1 - 0.0126984126984127*G11_6_11_0 - 0.0190476190476191*G11_6_11_1 - 0.00634920634920636*G11_7_6_0 - 0.00634920634920635*G11_7_6_1 - 0.0190476190476191*G11_7_7_0 + 0.0126984126984127*G11_7_8_1 + 0.0126984126984127*G11_7_9_0 - 0.019047619047619*G11_7_9_1 - 0.0126984126984127*G11_7_10_0 - 0.00634920634920639*G11_7_10_1 + 0.0253968253968254*G11_7_11_0 + 0.0190476190476191*G11_7_11_1 - 0.00634920634920632*G11_8_6_0 - 0.00634920634920633*G11_8_6_1 + 0.0126984126984127*G11_8_7_0 - 0.019047619047619*G11_8_8_1 - 0.019047619047619*G11_8_9_0 + 0.0126984126984127*G11_8_9_1 + 0.019047619047619*G11_8_10_0 + 0.0253968253968254*G11_8_10_1 - 0.00634920634920638*G11_8_11_0 - 0.0126984126984127*G11_8_11_1 - 0.0380952380952381*G11_9_6_0 - 0.0380952380952375*G11_9_6_1 - 0.0634920634920635*G11_9_7_0 - 0.0634920634920636*G11_9_8_1 - 0.152380952380952*G11_9_9_0 - 0.152380952380951*G11_9_9_1 + 0.152380952380952*G11_9_10_0 + 0.101587301587301*G11_9_10_1 + 0.101587301587302*G11_9_11_0 + 0.152380952380952*G11_9_11_1 + 0.00634920634920632*G11_10_6_0 + 0.00634920634920658*G11_10_6_1 - 0.00634920634920632*G11_10_7_0 - 0.0317460317460318*G11_10_8_1 - 0.0761904761904761*G11_10_9_0 - 0.0507936507936502*G11_10_9_1 + 0.0761904761904761*G11_10_10_0 + 0.025396825396825*G11_10_10_1 + 0.0507936507936508*G11_10_11_1 + 0.00634920634920629*G11_11_6_0 + 0.00634920634920657*G11_11_6_1 - 0.0317460317460317*G11_11_7_0 - 0.00634920634920642*G11_11_8_1 - 0.0507936507936507*G11_11_9_0 - 0.0761904761904756*G11_11_9_1 + 0.0507936507936507*G11_11_10_0 + 0.0253968253968254*G11_11_11_0 + 0.0761904761904763*G11_11_11_1 - 0.666666666666667*G13_0_8_1 - 1.33333333333333*G13_0_9_0 - 0.666666666666656*G13_0_9_1 + 1.33333333333333*G13_0_10_0 + 0.666666666666659*G13_0_10_1 + 0.666666666666665*G13_0_11_1 - 0.666666666666664*G13_1_7_0 - 0.666666666666656*G13_1_9_0 - 1.33333333333332*G13_1_9_1 + 0.666666666666656*G13_1_10_0 + 0.666666666666666*G13_1_11_0 + 1.33333333333333*G13_1_11_1 - 0.666666666666667*G15_0_8_1 - 1.33333333333333*G15_0_9_0 - 0.666666666666656*G15_0_9_1 + 1.33333333333333*G15_0_10_0 + 0.666666666666659*G15_0_10_1 + 0.666666666666665*G15_0_11_1 - 0.666666666666664*G15_1_7_0 - 0.666666666666656*G15_1_9_0 - 1.33333333333332*G15_1_9_1 + 0.666666666666656*G15_1_10_0 + 0.666666666666666*G15_1_11_0 + 1.33333333333333*G15_1_11_1 - 0.0111111111111111*G18_6 + 0.0888888888888888*G18_9 + 0.0444444444444444*G18_10 + 0.0444444444444445*G18_11 + 0.0111111111111111*G19_6 - 0.0888888888888888*G19_9 - 0.0444444444444444*G19_10 - 0.0444444444444445*G19_11;
    A[10] = -0.166666666666666*G1_0_0 + 0.166666666666668*G1_0_1 - 0.166666666666666*G1_1_0 - 0.333333333333333*G1_2_0 - 0.166666666666665*G1_2_1 + 0.00952380952380953*G6_6_0_0 + 0.00952380952380953*G6_6_0_1 + 0.00317460317460318*G6_6_1_0 + 0.00634920634920636*G6_6_2_1 + 0.00634920634920634*G6_6_3_0 + 0.00317460317460316*G6_6_3_1 - 0.00634920634920634*G6_6_4_0 - 0.0158730158730159*G6_6_4_1 - 0.0126984126984127*G6_6_5_0 - 0.00317460317460318*G6_6_5_1 - 0.00396825396825397*G6_7_0_0 - 0.00396825396825399*G6_7_0_1 - 0.00238095238095238*G6_7_1_0 + 0.00396825396825398*G6_7_2_1 + 0.00952380952380951*G6_7_3_0 + 0.00317460317460311*G6_7_3_1 - 0.00952380952380951*G6_7_4_0 + 0.00634920634920635*G6_7_5_0 - 0.00317460317460318*G6_7_5_1 - 0.00634920634920634*G6_8_0_0 - 0.00634920634920634*G6_8_0_1 + 0.00317460317460317*G6_8_1_0 - 0.00952380952380953*G6_8_2_1 - 0.00952380952380951*G6_8_3_0 + 0.00317460317460319*G6_8_3_1 + 0.00952380952380951*G6_8_4_0 + 0.0158730158730159*G6_8_4_1 + 0.00317460317460317*G6_8_5_0 - 0.00317460317460318*G6_8_5_1 + 0.00317460317460316*G6_9_0_0 + 0.00317460317460329*G6_9_0_1 - 0.00317460317460316*G6_9_1_0 - 0.0158730158730159*G6_9_2_1 - 0.038095238095238*G6_9_3_0 - 0.0253968253968251*G6_9_3_1 + 0.038095238095238*G6_9_4_0 + 0.0126984126984125*G6_9_4_1 + 0.0253968253968254*G6_9_5_1 + 0.0317460317460317*G6_10_0_0 + 0.031746031746032*G6_10_0_1 + 0.0190476190476191*G6_10_1_0 - 0.0317460317460318*G6_10_2_1 - 0.0761904761904761*G6_10_3_0 - 0.0253968253968248*G6_10_3_1 + 0.0761904761904761*G6_10_4_0 - 0.0507936507936508*G6_10_5_0 + 0.0253968253968254*G6_10_5_1 + 0.0158730158730159*G6_11_0_0 + 0.015873015873016*G6_11_0_1 - 0.00317460317460315*G6_11_1_0 - 0.00317460317460321*G6_11_2_1 - 0.0253968253968254*G6_11_3_0 - 0.0253968253968251*G6_11_3_1 + 0.0253968253968254*G6_11_4_0 - 0.0126984126984129*G6_11_4_1 - 0.0126984126984127*G6_11_5_0 + 0.0253968253968254*G6_11_5_1 + 0.00952380952380953*G7_6_6_0 + 0.00952380952380953*G7_6_6_1 + 0.00317460317460318*G7_6_7_0 + 0.00634920634920636*G7_6_8_1 + 0.00634920634920634*G7_6_9_0 + 0.00317460317460316*G7_6_9_1 - 0.00634920634920634*G7_6_10_0 - 0.0158730158730159*G7_6_10_1 - 0.0126984126984127*G7_6_11_0 - 0.00317460317460318*G7_6_11_1 - 0.00396825396825397*G7_7_6_0 - 0.00396825396825399*G7_7_6_1 - 0.00238095238095238*G7_7_7_0 + 0.00396825396825398*G7_7_8_1 + 0.00952380952380951*G7_7_9_0 + 0.00317460317460311*G7_7_9_1 - 0.00952380952380951*G7_7_10_0 + 0.00634920634920635*G7_7_11_0 - 0.00317460317460318*G7_7_11_1 - 0.00634920634920634*G7_8_6_0 - 0.00634920634920634*G7_8_6_1 + 0.00317460317460317*G7_8_7_0 - 0.00952380952380953*G7_8_8_1 - 0.00952380952380951*G7_8_9_0 + 0.00317460317460319*G7_8_9_1 + 0.00952380952380951*G7_8_10_0 + 0.0158730158730159*G7_8_10_1 + 0.00317460317460317*G7_8_11_0 - 0.00317460317460318*G7_8_11_1 + 0.00317460317460316*G7_9_6_0 + 0.00317460317460329*G7_9_6_1 - 0.00317460317460316*G7_9_7_0 - 0.0158730158730159*G7_9_8_1 - 0.038095238095238*G7_9_9_0 - 0.0253968253968251*G7_9_9_1 + 0.038095238095238*G7_9_10_0 + 0.0126984126984125*G7_9_10_1 + 0.0253968253968254*G7_9_11_1 + 0.0317460317460317*G7_10_6_0 + 0.031746031746032*G7_10_6_1 + 0.0190476190476191*G7_10_7_0 - 0.0317460317460318*G7_10_8_1 - 0.0761904761904761*G7_10_9_0 - 0.0253968253968248*G7_10_9_1 + 0.0761904761904761*G7_10_10_0 - 0.0507936507936508*G7_10_11_0 + 0.0253968253968254*G7_10_11_1 + 0.0158730158730159*G7_11_6_0 + 0.015873015873016*G7_11_6_1 - 0.00317460317460315*G7_11_7_0 - 0.00317460317460321*G7_11_8_1 - 0.0253968253968254*G7_11_9_0 - 0.0253968253968251*G7_11_9_1 + 0.0253968253968254*G7_11_10_0 - 0.0126984126984129*G7_11_10_1 - 0.0126984126984127*G7_11_11_0 + 0.0253968253968254*G7_11_11_1 + 0.0190476190476191*G10_0_6_0 + 0.0190476190476191*G10_0_6_1 + 0.00634920634920637*G10_0_7_0 + 0.0126984126984127*G10_0_8_1 + 0.0126984126984127*G10_0_9_0 + 0.00634920634920632*G10_0_9_1 - 0.0126984126984127*G10_0_10_0 - 0.0317460317460317*G10_0_10_1 - 0.0253968253968254*G10_0_11_0 - 0.00634920634920635*G10_0_11_1 - 0.00793650793650794*G10_1_6_0 - 0.00793650793650799*G10_1_6_1 - 0.00476190476190477*G10_1_7_0 + 0.00793650793650796*G10_1_8_1 + 0.019047619047619*G10_1_9_0 + 0.00634920634920622*G10_1_9_1 - 0.019047619047619*G10_1_10_0 + 0.0126984126984127*G10_1_11_0 - 0.00634920634920636*G10_1_11_1 - 0.0126984126984127*G10_2_6_0 - 0.0126984126984127*G10_2_6_1 + 0.00634920634920634*G10_2_7_0 - 0.0190476190476191*G10_2_8_1 - 0.019047619047619*G10_2_9_0 + 0.00634920634920638*G10_2_9_1 + 0.019047619047619*G10_2_10_0 + 0.0317460317460317*G10_2_10_1 + 0.00634920634920633*G10_2_11_0 - 0.00634920634920635*G10_2_11_1 + 0.00634920634920633*G10_3_6_0 + 0.00634920634920658*G10_3_6_1 - 0.00634920634920632*G10_3_7_0 - 0.0317460317460318*G10_3_8_1 - 0.0761904761904761*G10_3_9_0 - 0.0507936507936502*G10_3_9_1 + 0.0761904761904761*G10_3_10_0 + 0.025396825396825*G10_3_10_1 + 0.0507936507936508*G10_3_11_1 + 0.0634920634920635*G10_4_6_0 + 0.0634920634920639*G10_4_6_1 + 0.0380952380952382*G10_4_7_0 - 0.0634920634920636*G10_4_8_1 - 0.152380952380952*G10_4_9_0 - 0.0507936507936497*G10_4_9_1 + 0.152380952380952*G10_4_10_0 - 0.101587301587302*G10_4_11_0 + 0.0507936507936508*G10_4_11_1 + 0.0317460317460317*G10_5_6_0 + 0.031746031746032*G10_5_6_1 - 0.00634920634920629*G10_5_7_0 - 0.00634920634920642*G10_5_8_1 - 0.0507936507936507*G10_5_9_0 - 0.0507936507936502*G10_5_9_1 + 0.0507936507936507*G10_5_10_0 - 0.0253968253968258*G10_5_10_1 - 0.0253968253968254*G10_5_11_0 + 0.0507936507936508*G10_5_11_1 + 0.0190476190476191*G11_6_6_0 + 0.0190476190476191*G11_6_6_1 + 0.00634920634920637*G11_6_7_0 + 0.0126984126984127*G11_6_8_1 + 0.0126984126984127*G11_6_9_0 + 0.00634920634920632*G11_6_9_1 - 0.0126984126984127*G11_6_10_0 - 0.0317460317460317*G11_6_10_1 - 0.0253968253968254*G11_6_11_0 - 0.00634920634920635*G11_6_11_1 - 0.00793650793650794*G11_7_6_0 - 0.00793650793650799*G11_7_6_1 - 0.00476190476190477*G11_7_7_0 + 0.00793650793650796*G11_7_8_1 + 0.019047619047619*G11_7_9_0 + 0.00634920634920622*G11_7_9_1 - 0.019047619047619*G11_7_10_0 + 0.0126984126984127*G11_7_11_0 - 0.00634920634920636*G11_7_11_1 - 0.0126984126984127*G11_8_6_0 - 0.0126984126984127*G11_8_6_1 + 0.00634920634920634*G11_8_7_0 - 0.0190476190476191*G11_8_8_1 - 0.019047619047619*G11_8_9_0 + 0.00634920634920638*G11_8_9_1 + 0.019047619047619*G11_8_10_0 + 0.0317460317460317*G11_8_10_1 + 0.00634920634920633*G11_8_11_0 - 0.00634920634920635*G11_8_11_1 + 0.00634920634920633*G11_9_6_0 + 0.00634920634920658*G11_9_6_1 - 0.00634920634920632*G11_9_7_0 - 0.0317460317460318*G11_9_8_1 - 0.0761904761904761*G11_9_9_0 - 0.0507936507936502*G11_9_9_1 + 0.0761904761904761*G11_9_10_0 + 0.025396825396825*G11_9_10_1 + 0.0507936507936508*G11_9_11_1 + 0.0634920634920635*G11_10_6_0 + 0.0634920634920639*G11_10_6_1 + 0.0380952380952382*G11_10_7_0 - 0.0634920634920636*G11_10_8_1 - 0.152380952380952*G11_10_9_0 - 0.0507936507936497*G11_10_9_1 + 0.152380952380952*G11_10_10_0 - 0.101587301587302*G11_10_11_0 + 0.0507936507936508*G11_10_11_1 + 0.0317460317460317*G11_11_6_0 + 0.031746031746032*G11_11_6_1 - 0.00634920634920629*G11_11_7_0 - 0.00634920634920642*G11_11_8_1 - 0.0507936507936507*G11_11_9_0 - 0.0507936507936502*G11_11_9_1 + 0.0507936507936507*G11_11_10_0 - 0.0253968253968258*G11_11_10_1 - 0.0253968253968254*G11_11_11_0 + 0.0507936507936508*G11_11_11_1 + 0.666666666666667*G13_0_8_1 + 1.33333333333333*G13_0_9_0 + 0.666666666666656*G13_0_9_1 - 1.33333333333333*G13_0_10_0 - 0.666666666666659*G13_0_10_1 - 0.666666666666665*G13_0_11_1 + 0.666666666666668*G13_1_6_0 + 0.666666666666668*G13_1_6_1 + 0.666666666666665*G13_1_8_1 + 0.666666666666659*G13_1_9_0 - 0.666666666666659*G13_1_10_0 - 1.33333333333333*G13_1_10_1 - 0.666666666666666*G13_1_11_0 + 0.666666666666667*G15_0_8_1 + 1.33333333333333*G15_0_9_0 + 0.666666666666656*G15_0_9_1 - 1.33333333333333*G15_0_10_0 - 0.666666666666659*G15_0_10_1 - 0.666666666666665*G15_0_11_1 + 0.666666666666668*G15_1_6_0 + 0.666666666666668*G15_1_6_1 + 0.666666666666665*G15_1_8_1 + 0.666666666666659*G15_1_9_0 - 0.666666666666659*G15_1_10_0 - 1.33333333333333*G15_1_10_1 - 0.666666666666666*G15_1_11_0 - 0.0111111111111111*G18_7 + 0.0444444444444444*G18_9 + 0.0888888888888889*G18_10 + 0.0444444444444444*G18_11 + 0.0111111111111111*G19_7 - 0.0444444444444444*G19_9 - 0.0888888888888889*G19_10 - 0.0444444444444444*G19_11;
    A[11] = 0.166666666666667*G1_0_0 - 0.166666666666667*G1_0_1 - 0.166666666666667*G1_1_0 - 0.333333333333333*G1_1_1 - 0.166666666666667*G1_2_1 + 0.00952380952380953*G6_6_0_0 + 0.00952380952380952*G6_6_0_1 + 0.00634920634920636*G6_6_1_0 + 0.00317460317460318*G6_6_2_1 + 0.00317460317460318*G6_6_3_0 + 0.00634920634920634*G6_6_3_1 - 0.00317460317460318*G6_6_4_0 - 0.0126984126984127*G6_6_4_1 - 0.0158730158730159*G6_6_5_0 - 0.00634920634920636*G6_6_5_1 - 0.00634920634920636*G6_7_0_0 - 0.00634920634920634*G6_7_0_1 - 0.00952380952380953*G6_7_1_0 + 0.00317460317460318*G6_7_2_1 + 0.00317460317460317*G6_7_3_0 - 0.00952380952380952*G6_7_3_1 - 0.00317460317460317*G6_7_4_0 + 0.00317460317460315*G6_7_4_1 + 0.0158730158730159*G6_7_5_0 + 0.00952380952380954*G6_7_5_1 - 0.00396825396825396*G6_8_0_0 - 0.00396825396825399*G6_8_0_1 + 0.00396825396825396*G6_8_1_0 - 0.00238095238095238*G6_8_2_1 + 0.00317460317460316*G6_8_3_0 + 0.00952380952380946*G6_8_3_1 - 0.00317460317460316*G6_8_4_0 + 0.00634920634920641*G6_8_4_1 - 0.00952380952380953*G6_8_5_1 + 0.00317460317460315*G6_9_0_0 + 0.00317460317460328*G6_9_0_1 - 0.0158730158730159*G6_9_1_0 - 0.00317460317460321*G6_9_2_1 - 0.0253968253968254*G6_9_3_0 - 0.0380952380952378*G6_9_3_1 + 0.0253968253968254*G6_9_4_0 + 0.0126984126984127*G6_9_5_0 + 0.0380952380952381*G6_9_5_1 + 0.0158730158730159*G6_10_0_0 + 0.015873015873016*G6_10_0_1 - 0.00317460317460315*G6_10_1_0 - 0.00317460317460321*G6_10_2_1 - 0.0253968253968254*G6_10_3_0 - 0.0253968253968251*G6_10_3_1 + 0.0253968253968254*G6_10_4_0 - 0.0126984126984129*G6_10_4_1 - 0.0126984126984127*G6_10_5_0 + 0.0253968253968254*G6_10_5_1 + 0.0317460317460317*G6_11_0_0 + 0.031746031746032*G6_11_0_1 - 0.0317460317460317*G6_11_1_0 + 0.019047619047619*G6_11_2_1 - 0.0253968253968253*G6_11_3_0 - 0.0761904761904757*G6_11_3_1 + 0.0253968253968253*G6_11_4_0 - 0.0507936507936512*G6_11_4_1 + 0.0761904761904763*G6_11_5_1 + 0.00952380952380953*G7_6_6_0 + 0.00952380952380952*G7_6_6_1 + 0.00634920634920636*G7_6_7_0 + 0.00317460317460318*G7_6_8_1 + 0.00317460317460318*G7_6_9_0 + 0.00634920634920634*G7_6_9_1 - 0.00317460317460318*G7_6_10_0 - 0.0126984126984127*G7_6_10_1 - 0.0158730158730159*G7_6_11_0 - 0.00634920634920636*G7_6_11_1 - 0.00634920634920636*G7_7_6_0 - 0.00634920634920634*G7_7_6_1 - 0.00952380952380953*G7_7_7_0 + 0.00317460317460318*G7_7_8_1 + 0.00317460317460317*G7_7_9_0 - 0.00952380952380952*G7_7_9_1 - 0.00317460317460317*G7_7_10_0 + 0.00317460317460315*G7_7_10_1 + 0.0158730158730159*G7_7_11_0 + 0.00952380952380954*G7_7_11_1 - 0.00396825396825396*G7_8_6_0 - 0.00396825396825399*G7_8_6_1 + 0.00396825396825396*G7_8_7_0 - 0.00238095238095238*G7_8_8_1 + 0.00317460317460316*G7_8_9_0 + 0.00952380952380946*G7_8_9_1 - 0.00317460317460316*G7_8_10_0 + 0.00634920634920641*G7_8_10_1 - 0.00952380952380953*G7_8_11_1 + 0.00317460317460315*G7_9_6_0 + 0.00317460317460328*G7_9_6_1 - 0.0158730158730159*G7_9_7_0 - 0.00317460317460321*G7_9_8_1 - 0.0253968253968254*G7_9_9_0 - 0.0380952380952378*G7_9_9_1 + 0.0253968253968254*G7_9_10_0 + 0.0126984126984127*G7_9_11_0 + 0.0380952380952381*G7_9_11_1 + 0.0158730158730159*G7_10_6_0 + 0.015873015873016*G7_10_6_1 - 0.00317460317460315*G7_10_7_0 - 0.00317460317460321*G7_10_8_1 - 0.0253968253968254*G7_10_9_0 - 0.0253968253968251*G7_10_9_1 + 0.0253968253968254*G7_10_10_0 - 0.0126984126984129*G7_10_10_1 - 0.0126984126984127*G7_10_11_0 + 0.0253968253968254*G7_10_11_1 + 0.0317460317460317*G7_11_6_0 + 0.031746031746032*G7_11_6_1 - 0.0317460317460317*G7_11_7_0 + 0.019047619047619*G7_11_8_1 - 0.0253968253968253*G7_11_9_0 - 0.0761904761904757*G7_11_9_1 + 0.0253968253968253*G7_11_10_0 - 0.0507936507936512*G7_11_10_1 + 0.0761904761904763*G7_11_11_1 + 0.0190476190476191*G10_0_6_0 + 0.019047619047619*G10_0_6_1 + 0.0126984126984127*G10_0_7_0 + 0.00634920634920636*G10_0_8_1 + 0.00634920634920635*G10_0_9_0 + 0.0126984126984127*G10_0_9_1 - 0.00634920634920635*G10_0_10_0 - 0.0253968253968254*G10_0_10_1 - 0.0317460317460318*G10_0_11_0 - 0.0126984126984127*G10_0_11_1 - 0.0126984126984127*G10_1_6_0 - 0.0126984126984127*G10_1_6_1 - 0.0190476190476191*G10_1_7_0 + 0.00634920634920637*G10_1_8_1 + 0.00634920634920635*G10_1_9_0 - 0.019047619047619*G10_1_9_1 - 0.00634920634920635*G10_1_10_0 + 0.0063492063492063*G10_1_10_1 + 0.0317460317460318*G10_1_11_0 + 0.0190476190476191*G10_1_11_1 - 0.00793650793650792*G10_2_6_0 - 0.00793650793650799*G10_2_6_1 + 0.00793650793650793*G10_2_7_0 - 0.00476190476190476*G10_2_8_1 + 0.00634920634920632*G10_2_9_0 + 0.0190476190476189*G10_2_9_1 - 0.00634920634920632*G10_2_10_0 + 0.0126984126984128*G10_2_10_1 - 0.0190476190476191*G10_2_11_1 + 0.00634920634920629*G10_3_6_0 + 0.00634920634920657*G10_3_6_1 - 0.0317460317460317*G10_3_7_0 - 0.00634920634920642*G10_3_8_1 - 0.0507936507936507*G10_3_9_0 - 0.0761904761904757*G10_3_9_1 + 0.0507936507936507*G10_3_10_0 + 0.0253968253968254*G10_3_11_0 + 0.0761904761904763*G10_3_11_1 + 0.0317460317460317*G10_4_6_0 + 0.031746031746032*G10_4_6_1 - 0.00634920634920629*G10_4_7_0 - 0.00634920634920642*G10_4_8_1 - 0.0507936507936507*G10_4_9_0 - 0.0507936507936502*G10_4_9_1 + 0.0507936507936507*G10_4_10_0 - 0.0253968253968258*G10_4_10_1 - 0.0253968253968254*G10_4_11_0 + 0.0507936507936508*G10_4_11_1 + 0.0634920634920634*G10_5_6_0 + 0.0634920634920639*G10_5_6_1 - 0.0634920634920634*G10_5_7_0 + 0.038095238095238*G10_5_8_1 - 0.0507936507936506*G10_5_9_0 - 0.152380952380951*G10_5_9_1 + 0.0507936507936506*G10_5_10_0 - 0.101587301587302*G10_5_10_1 + 0.152380952380953*G10_5_11_1 + 0.0190476190476191*G11_6_6_0 + 0.019047619047619*G11_6_6_1 + 0.0126984126984127*G11_6_7_0 + 0.00634920634920636*G11_6_8_1 + 0.00634920634920635*G11_6_9_0 + 0.0126984126984127*G11_6_9_1 - 0.00634920634920635*G11_6_10_0 - 0.0253968253968254*G11_6_10_1 - 0.0317460317460318*G11_6_11_0 - 0.0126984126984127*G11_6_11_1 - 0.0126984126984127*G11_7_6_0 - 0.0126984126984127*G11_7_6_1 - 0.0190476190476191*G11_7_7_0 + 0.00634920634920637*G11_7_8_1 + 0.00634920634920635*G11_7_9_0 - 0.019047619047619*G11_7_9_1 - 0.00634920634920635*G11_7_10_0 + 0.0063492063492063*G11_7_10_1 + 0.0317460317460318*G11_7_11_0 + 0.0190476190476191*G11_7_11_1 - 0.00793650793650792*G11_8_6_0 - 0.00793650793650799*G11_8_6_1 + 0.00793650793650793*G11_8_7_0 - 0.00476190476190476*G11_8_8_1 + 0.00634920634920632*G11_8_9_0 + 0.0190476190476189*G11_8_9_1 - 0.00634920634920632*G11_8_10_0 + 0.0126984126984128*G11_8_10_1 - 0.0190476190476191*G11_8_11_1 + 0.00634920634920629*G11_9_6_0 + 0.00634920634920657*G11_9_6_1 - 0.0317460317460317*G11_9_7_0 - 0.00634920634920642*G11_9_8_1 - 0.0507936507936507*G11_9_9_0 - 0.0761904761904757*G11_9_9_1 + 0.0507936507936507*G11_9_10_0 + 0.0253968253968254*G11_9_11_0 + 0.0761904761904763*G11_9_11_1 + 0.0317460317460317*G11_10_6_0 + 0.031746031746032*G11_10_6_1 - 0.00634920634920629*G11_10_7_0 - 0.00634920634920642*G11_10_8_1 - 0.0507936507936507*G11_10_9_0 - 0.0507936507936502*G11_10_9_1 + 0.0507936507936507*G11_10_10_0 - 0.0253968253968258*G11_10_10_1 - 0.0253968253968254*G11_10_11_0 + 0.0507936507936508*G11_10_11_1 + 0.0634920634920634*G11_11_6_0 + 0.0634920634920639*G11_11_6_1 - 0.0634920634920634*G11_11_7_0 + 0.038095238095238*G11_11_8_1 - 0.0507936507936506*G11_11_9_0 - 0.152380952380951*G11_11_9_1 + 0.0507936507936506*G11_11_10_0 - 0.101587301587302*G11_11_10_1 + 0.152380952380953*G11_11_11_1 + 0.666666666666668*G13_0_6_0 + 0.666666666666667*G13_0_6_1 + 0.666666666666668*G13_0_7_0 + 0.666666666666666*G13_0_9_1 - 0.666666666666666*G13_0_10_1 - 1.33333333333334*G13_0_11_0 - 0.666666666666667*G13_0_11_1 + 0.666666666666667*G13_1_7_0 + 0.666666666666665*G13_1_9_0 + 1.33333333333333*G13_1_9_1 - 0.666666666666665*G13_1_10_0 - 0.666666666666667*G13_1_11_0 - 1.33333333333333*G13_1_11_1 + 0.666666666666668*G15_0_6_0 + 0.666666666666667*G15_0_6_1 + 0.666666666666668*G15_0_7_0 + 0.666666666666666*G15_0_9_1 - 0.666666666666666*G15_0_10_1 - 1.33333333333334*G15_0_11_0 - 0.666666666666667*G15_0_11_1 + 0.666666666666667*G15_1_7_0 + 0.666666666666665*G15_1_9_0 + 1.33333333333333*G15_1_9_1 - 0.666666666666665*G15_1_10_0 - 0.666666666666667*G15_1_11_0 - 1.33333333333333*G15_1_11_1 - 0.0111111111111111*G18_8 + 0.0444444444444445*G18_9 + 0.0444444444444444*G18_10 + 0.0888888888888889*G18_11 + 0.0111111111111111*G19_8 - 0.0444444444444445*G19_9 - 0.0444444444444444*G19_10 - 0.0888888888888889*G19_11;
    A[12] = -0.166666666666667*G2_0_0 - 0.166666666666668*G2_0_1 + 0.166666666666666*G2_3_0 + 0.166666666666665*G2_3_1 - 0.166666666666666*G2_4_0 + 0.166666666666668*G2_4_1 + 0.166666666666667*G2_5_0 - 0.166666666666667*G2_5_1 - 0.166666666666667*G3_6_0 - 0.166666666666668*G3_6_1 + 0.166666666666666*G3_9_0 + 0.166666666666665*G3_9_1 - 0.166666666666666*G3_10_0 + 0.166666666666668*G3_10_1 + 0.166666666666667*G3_11_0 - 0.166666666666667*G3_11_1;
    A[13] = 0.166666666666667*G2_1_0 + 0.166666666666666*G2_3_0 + 0.333333333333331*G2_3_1 - 0.166666666666666*G2_4_0 - 0.166666666666667*G2_5_0 - 0.333333333333333*G2_5_1 + 0.166666666666667*G3_7_0 + 0.166666666666666*G3_9_0 + 0.333333333333331*G3_9_1 - 0.166666666666666*G3_10_0 - 0.166666666666667*G3_11_0 - 0.333333333333333*G3_11_1;
    A[14] = 0.166666666666667*G2_2_1 + 0.333333333333333*G2_3_0 + 0.166666666666664*G2_3_1 - 0.333333333333333*G2_4_0 - 0.166666666666665*G2_4_1 - 0.166666666666667*G2_5_1 + 0.166666666666667*G3_8_1 + 0.333333333333333*G3_9_0 + 0.166666666666664*G3_9_1 - 0.333333333333333*G3_10_0 - 0.166666666666665*G3_10_1 - 0.166666666666667*G3_11_1;
  }

};

/// This class defines the interface for the tabulation of the
/// exterior facet tensor corresponding to the local contribution to
/// a form from the integral over an exterior facet.

class ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_exterior_facet_integral_0_0: public ufc::exterior_facet_integral
{
public:

  /// Constructor
  ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_exterior_facet_integral_0_0() : ufc::exterior_facet_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_exterior_facet_integral_0_0()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({false, false, true, false});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local exterior facet
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t facet,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    static unsigned int edge_vertices[3][2] = {{1, 2}, {0, 2}, {0, 1}};
    const unsigned int v0 = edge_vertices[facet][0];
    const unsigned int v1 = edge_vertices[facet][1];
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    const double dx0 = vertex_coordinates[2*v1 + 0] - vertex_coordinates[2*v0 + 0];
    const double dx1 = vertex_coordinates[2*v1 + 1] - vertex_coordinates[2*v0 + 1];
    const double det = std::sqrt(dx0*dx0 + dx1*dx1);
    
    
    const bool direction = dx1*(vertex_coordinates[2*facet] - vertex_coordinates[2*v0]) - dx0*(vertex_coordinates[2*facet + 1] - vertex_coordinates[2*v0 + 1]) < 0;
    // Compute facet normals from the facet scale factor constants
    const double n0 = direction ? dx1 / det : -dx1 / det;
    const double n1 = direction ? -dx0 / det : dx0 / det;
    
    // Facet area
    
    // Compute cell volume
    
    
    // Compute circumradius of triangle in 2D
    
    
    // Array of quadrature weights.
    static const double W4[4] = {0.173927422568727, 0.326072577431273, 0.326072577431273, 0.173927422568727};
    // Quadrature points on the UFC reference element: (0.0694318442029737), (0.330009478207572), (0.669990521792428), (0.930568155797026)
    
    // Values of basis functions at quadrature points.
    static const double FE1_f0_C0[4][12] = \
    {{0.0, 0.801346029369931, -0.0597902822241217, 0.258444252854191, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.227784076790952, -0.112196966793904, 0.884412890002952, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, -0.112196966793904, 0.227784076790952, 0.884412890002952, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, -0.0597902822241217, 0.801346029369931, 0.258444252854191, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_f0_C1[4][12] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.801346029369931, -0.0597902822241217, 0.258444252854191, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.227784076790952, -0.112196966793904, 0.884412890002952, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.112196966793904, 0.227784076790952, 0.884412890002952, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0597902822241217, 0.801346029369931, 0.258444252854191, 0.0, 0.0}};
    
    static const double FE1_f1_C0[4][12] = \
    {{0.801346029369931, 0.0, -0.0597902822241217, 0.0, 0.258444252854191, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.227784076790952, 0.0, -0.112196966793904, 0.0, 0.884412890002952, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.112196966793904, 0.0, 0.227784076790952, 0.0, 0.884412890002952, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0597902822241217, 0.0, 0.801346029369931, 0.0, 0.258444252854191, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_f1_C1[4][12] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.801346029369931, 0.0, -0.0597902822241217, 0.0, 0.258444252854191, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.227784076790952, 0.0, -0.112196966793904, 0.0, 0.884412890002952, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.112196966793904, 0.0, 0.227784076790952, 0.0, 0.884412890002952, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0597902822241217, 0.0, 0.801346029369931, 0.0, 0.258444252854191, 0.0}};
    
    static const double FE1_f2_C0[4][12] = \
    {{0.801346029369931, -0.0597902822241217, 0.0, 0.0, 0.0, 0.258444252854191, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.227784076790952, -0.112196966793904, 0.0, 0.0, 0.0, 0.884412890002952, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.112196966793904, 0.227784076790952, 0.0, 0.0, 0.0, 0.884412890002952, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0597902822241217, 0.801346029369931, 0.0, 0.0, 0.0, 0.258444252854191, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_f2_C1[4][12] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.801346029369931, -0.0597902822241217, 0.0, 0.0, 0.0, 0.258444252854191},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.227784076790952, -0.112196966793904, 0.0, 0.0, 0.0, 0.884412890002952},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.112196966793904, 0.227784076790952, 0.0, 0.0, 0.0, 0.884412890002952},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0597902822241217, 0.801346029369931, 0.0, 0.0, 0.0, 0.258444252854191}};
    
    static const double FE2_f0_C0[4][15] = \
    {{0.0, 0.801346029369931, -0.0597902822241217, 0.258444252854191, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.227784076790952, -0.112196966793904, 0.884412890002952, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, -0.112196966793904, 0.227784076790952, 0.884412890002952, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, -0.0597902822241217, 0.801346029369931, 0.258444252854191, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE2_f0_C1[4][15] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.801346029369931, -0.0597902822241217, 0.258444252854191, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.227784076790952, -0.112196966793904, 0.884412890002952, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.112196966793904, 0.227784076790952, 0.884412890002952, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0597902822241217, 0.801346029369931, 0.258444252854191, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE2_f1_C0[4][15] = \
    {{0.801346029369931, 0.0, -0.0597902822241217, 0.0, 0.258444252854191, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.227784076790952, 0.0, -0.112196966793904, 0.0, 0.884412890002952, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.112196966793904, 0.0, 0.227784076790952, 0.0, 0.884412890002952, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0597902822241217, 0.0, 0.801346029369931, 0.0, 0.258444252854191, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE2_f1_C1[4][15] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.801346029369931, 0.0, -0.0597902822241217, 0.0, 0.258444252854191, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.227784076790952, 0.0, -0.112196966793904, 0.0, 0.884412890002952, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.112196966793904, 0.0, 0.227784076790952, 0.0, 0.884412890002952, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0597902822241217, 0.0, 0.801346029369931, 0.0, 0.258444252854191, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE2_f2_C0[4][15] = \
    {{0.801346029369931, -0.0597902822241217, 0.0, 0.0, 0.0, 0.258444252854191, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.227784076790952, -0.112196966793904, 0.0, 0.0, 0.0, 0.884412890002952, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.112196966793904, 0.227784076790952, 0.0, 0.0, 0.0, 0.884412890002952, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0597902822241217, 0.801346029369931, 0.0, 0.0, 0.0, 0.258444252854191, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE2_f2_C1[4][15] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.801346029369931, -0.0597902822241217, 0.0, 0.0, 0.0, 0.258444252854191, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.227784076790952, -0.112196966793904, 0.0, 0.0, 0.0, 0.884412890002952, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.112196966793904, 0.227784076790952, 0.0, 0.0, 0.0, 0.884412890002952, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0597902822241217, 0.801346029369931, 0.0, 0.0, 0.0, 0.258444252854191, 0.0, 0.0, 0.0}};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 15; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', False), ('ignore ones', False), ('ignore zero tables', False), ('optimisation', False), ('remove zero terms', False)
    switch (facet)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 972
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 972
      for (unsigned int ip = 0; ip < 4; ip++)
      {
        
        // Coefficient declarations.
        double F0 = 0.0;
        double F1 = 0.0;
        
        // Total number of operations to compute function values = 48
        for (unsigned int r = 0; r < 12; r++)
        {
          F0 += FE1_f0_C0[ip][r]*w[2][r];
          F1 += FE1_f0_C1[ip][r]*w[2][r];
        } // end loop over 'r'
        
        // Number of operations for primary indices: 195
        for (unsigned int j = 0; j < 15; j++)
        {
          // Number of operations to compute entry: 13
          A[j] += ((((FE2_f0_C0[ip][j]*F0 + FE2_f0_C1[ip][j]*F1))*(0.5*((n0*F0 + n1*F1))))*(-1.0))*(-1.0)*W4[ip]*det;
        } // end loop over 'j'
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 972
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 972
      for (unsigned int ip = 0; ip < 4; ip++)
      {
        
        // Coefficient declarations.
        double F0 = 0.0;
        double F1 = 0.0;
        
        // Total number of operations to compute function values = 48
        for (unsigned int r = 0; r < 12; r++)
        {
          F0 += FE1_f1_C0[ip][r]*w[2][r];
          F1 += FE1_f1_C1[ip][r]*w[2][r];
        } // end loop over 'r'
        
        // Number of operations for primary indices: 195
        for (unsigned int j = 0; j < 15; j++)
        {
          // Number of operations to compute entry: 13
          A[j] += ((((FE2_f1_C0[ip][j]*F0 + FE2_f1_C1[ip][j]*F1))*(0.5*((n0*F0 + n1*F1))))*(-1.0))*(-1.0)*W4[ip]*det;
        } // end loop over 'j'
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 972
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 972
      for (unsigned int ip = 0; ip < 4; ip++)
      {
        
        // Coefficient declarations.
        double F0 = 0.0;
        double F1 = 0.0;
        
        // Total number of operations to compute function values = 48
        for (unsigned int r = 0; r < 12; r++)
        {
          F0 += FE1_f2_C0[ip][r]*w[2][r];
          F1 += FE1_f2_C1[ip][r]*w[2][r];
        } // end loop over 'r'
        
        // Number of operations for primary indices: 195
        for (unsigned int j = 0; j < 15; j++)
        {
          // Number of operations to compute entry: 13
          A[j] += ((((FE2_f2_C0[ip][j]*F0 + FE2_f2_C1[ip][j]*F1))*(0.5*((n0*F0 + n1*F1))))*(-1.0))*(-1.0)*W4[ip]*det;
        } // end loop over 'j'
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_form_0: public ufc::form
{
public:

  /// Constructor
  ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_form_0() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_form_0()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "74f18906ab1ad692840053c58afb281b7a0765c0fa8d38f052fa26a8a068f076a94cae6d5139cac26cbe085984ef9fc6e1582df17193ffd2a134b0da5ca94b41";
  }


  /// Return the rank of the global tensor (r)
  virtual std::size_t rank() const
  {
    return 1;
  }

  /// Return the number of coefficients (n)
  virtual std::size_t num_coefficients() const
  {
    return 4;
  }

  /// Return original coefficient position for each coefficient (0 <= i < n)
  virtual std::size_t original_coefficient_position(std::size_t i) const
  {
    static const std::vector<std::size_t> position({0, 1, 2, 3});
    return position[i];
  }


  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_finite_element_3();
        break;
      }
    case 1:
      {
        return new ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_finite_element_1();
        break;
      }
    case 2:
      {
        return new ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_finite_element_1();
        break;
      }
    case 3:
      {
        return new ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_finite_element_1();
        break;
      }
    case 4:
      {
        return new ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_finite_element_2();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_dofmap_3();
        break;
      }
    case 1:
      {
        return new ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_dofmap_1();
        break;
      }
    case 2:
      {
        return new ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_dofmap_1();
        break;
      }
    case 3:
      {
        return new ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_dofmap_1();
        break;
      }
    case 4:
      {
        return new ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_dofmap_2();
        break;
      }
    }
    
    return 0;
  }


  /// Return the number of cell domains
  virtual std::size_t max_cell_subdomain_id() const
  {
    return 1;
  }

  /// Return the number of exterior facet domains
  virtual std::size_t max_exterior_facet_subdomain_id() const
  {
    return 1;
  }

  /// Return the number of interior facet domains
  virtual std::size_t max_interior_facet_subdomain_id() const
  {
    return 0;
  }

  /// Return the number of vertex domains
  virtual std::size_t max_vertex_subdomain_id() const
  {
    return 0;
  }

  /// Return the number of custom domains
  virtual std::size_t max_custom_subdomain_id() const
  {
    return 0;
  }


  /// Return whether the form has any cell integrals
  virtual bool has_cell_integrals() const
  {
    return true;
  }

  /// Return whether the form has any exterior facet integrals
  virtual bool has_exterior_facet_integrals() const
  {
    return true;
  }

  /// Return whether the form has any interior facet integrals
  virtual bool has_interior_facet_integrals() const
  {
    return false;
  }

  /// Return whether the form has any vertex integrals
  virtual bool has_vertex_integrals() const
  {
    return false;
  }

  /// Return whether the form has any custom integrals
  virtual bool has_custom_integrals() const
  {
    return false;
  }


  /// Create a new cell integral on sub domain subdomain_id
  virtual ufc::cell_integral* create_cell_integral(std::size_t subdomain_id) const
  {
    switch (subdomain_id)
    {
    case 0:
      {
        return new ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_cell_integral_0_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new exterior facet integral on sub domain subdomain_id
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(std::size_t subdomain_id) const
  {
    switch (subdomain_id)
    {
    case 0:
      {
        return new ffc_form_98bf8a8ece7c7c827508a25fdee08585c780c6e0_exterior_facet_integral_0_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new interior facet integral on sub domain subdomain_id
  virtual ufc::interior_facet_integral* create_interior_facet_integral(std::size_t subdomain_id) const
  {
    return 0;
  }

  /// Create a new vertex integral on sub domain subdomain_id
  virtual ufc::vertex_integral* create_vertex_integral(std::size_t subdomain_id) const
  {
    return 0;
  }

  /// Create a new custom integral on sub domain subdomain_id
  virtual ufc::custom_integral* create_custom_integral(std::size_t subdomain_id) const
  {
    return 0;
  }


  /// Create a new cell integral on everywhere else
  virtual ufc::cell_integral* create_default_cell_integral() const
  {
    return 0;
  }

  /// Create a new exterior facet integral on everywhere else
  virtual ufc::exterior_facet_integral* create_default_exterior_facet_integral() const
  {
    return 0;
  }

  /// Create a new interior facet integral on everywhere else
  virtual ufc::interior_facet_integral* create_default_interior_facet_integral() const
  {
    return 0;
  }

  /// Create a new vertex integral on everywhere else
  virtual ufc::vertex_integral* create_default_vertex_integral() const
  {
    return 0;
  }

  /// Create a new custom integral on everywhere else
  virtual ufc::custom_integral* create_default_custom_integral() const
  {
    return 0;
  }

};

#endif
